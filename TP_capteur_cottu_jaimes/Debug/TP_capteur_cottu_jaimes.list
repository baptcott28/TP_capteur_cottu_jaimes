
TP_capteur_cottu_jaimes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005328  08005328  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000007c  080053ac  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080053ac  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e77f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e7  00000000  00000000  0002e82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00030b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00031738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002349b  00000000  00000000  000322a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001081b  00000000  00000000  0005573b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cecc7  00000000  00000000  00065f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039cc  00000000  00000000  00134c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005130 	.word	0x08005130

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08005130 	.word	0x08005130

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <BMP280_etalonnage>:
		HAL_I2C_Master_Receive(&hi2c1,BMP280_ADDR,&calibration[i],1,HAL_MAX_DELAY);
		printf("%x\r\n",calibration[i]);
	}
}

void BMP280_etalonnage(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af02      	add	r7, sp, #8
	// Lecture des «trimming parameters»
	uint8_t calibration[26]; //tableau des variables
	uint8_t REG_trimming_parameter = 0x88; //premier address
 80005ba:	2388      	movs	r3, #136	; 0x88
 80005bc:	70fb      	strb	r3, [r7, #3]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &REG_trimming_parameter, 1, HAL_MAX_DELAY);
 80005be:	1cfa      	adds	r2, r7, #3
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	21ee      	movs	r1, #238	; 0xee
 80005ca:	483f      	ldr	r0, [pc, #252]	; (80006c8 <BMP280_etalonnage+0x114>)
 80005cc:	f001 fcdc 	bl	8001f88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, calibration, 26, HAL_MAX_DELAY);
 80005d0:	1d3a      	adds	r2, r7, #4
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	231a      	movs	r3, #26
 80005da:	21ee      	movs	r1, #238	; 0xee
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <BMP280_etalonnage+0x114>)
 80005de:	f001 fdd1 	bl	8002184 <HAL_I2C_Master_Receive>

	dig_T1 = (uint16_t)calibration[1] << 8 | calibration[0];
 80005e2:	797b      	ldrb	r3, [r7, #5]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	793b      	ldrb	r3, [r7, #4]
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <BMP280_etalonnage+0x118>)
 80005f4:	801a      	strh	r2, [r3, #0]
	dig_T2 = (int16_t)calibration[3] << 8 | calibration[2];
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	b21b      	sxth	r3, r3
 8000600:	4313      	orrs	r3, r2
 8000602:	b21a      	sxth	r2, r3
 8000604:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <BMP280_etalonnage+0x11c>)
 8000606:	801a      	strh	r2, [r3, #0]
	dig_T3 = (int16_t)calibration[5] << 8 | calibration[4];
 8000608:	7a7b      	ldrb	r3, [r7, #9]
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	b21a      	sxth	r2, r3
 800060e:	7a3b      	ldrb	r3, [r7, #8]
 8000610:	b21b      	sxth	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b21a      	sxth	r2, r3
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <BMP280_etalonnage+0x120>)
 8000618:	801a      	strh	r2, [r3, #0]
	dig_P1 = (uint16_t)calibration[7] << 8 | calibration[6];
 800061a:	7afb      	ldrb	r3, [r7, #11]
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	b21a      	sxth	r2, r3
 8000620:	7abb      	ldrb	r3, [r7, #10]
 8000622:	b21b      	sxth	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b21b      	sxth	r3, r3
 8000628:	b29a      	uxth	r2, r3
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <BMP280_etalonnage+0x124>)
 800062c:	801a      	strh	r2, [r3, #0]
	dig_P2 = (int16_t)calibration[9] << 8 | calibration[8];
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21a      	sxth	r2, r3
 8000634:	7b3b      	ldrb	r3, [r7, #12]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21a      	sxth	r2, r3
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <BMP280_etalonnage+0x128>)
 800063e:	801a      	strh	r2, [r3, #0]
	dig_P3 = (int16_t)calibration[11] << 8 | calibration[10];
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b21a      	sxth	r2, r3
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	b21b      	sxth	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b21a      	sxth	r2, r3
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <BMP280_etalonnage+0x12c>)
 8000650:	801a      	strh	r2, [r3, #0]
	dig_P4 = (int16_t)calibration[13] << 8 | calibration[12];
 8000652:	7c7b      	ldrb	r3, [r7, #17]
 8000654:	021b      	lsls	r3, r3, #8
 8000656:	b21a      	sxth	r2, r3
 8000658:	7c3b      	ldrb	r3, [r7, #16]
 800065a:	b21b      	sxth	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b21a      	sxth	r2, r3
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <BMP280_etalonnage+0x130>)
 8000662:	801a      	strh	r2, [r3, #0]
	dig_P5 = (int16_t)calibration[15] << 8 | calibration[14];
 8000664:	7cfb      	ldrb	r3, [r7, #19]
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b21a      	sxth	r2, r3
 800066a:	7cbb      	ldrb	r3, [r7, #18]
 800066c:	b21b      	sxth	r3, r3
 800066e:	4313      	orrs	r3, r2
 8000670:	b21a      	sxth	r2, r3
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <BMP280_etalonnage+0x134>)
 8000674:	801a      	strh	r2, [r3, #0]
	dig_P6 = (int16_t)calibration[17] << 8 | calibration[16];
 8000676:	7d7b      	ldrb	r3, [r7, #21]
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	b21a      	sxth	r2, r3
 800067c:	7d3b      	ldrb	r3, [r7, #20]
 800067e:	b21b      	sxth	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b21a      	sxth	r2, r3
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <BMP280_etalonnage+0x138>)
 8000686:	801a      	strh	r2, [r3, #0]
	dig_P7 = (int16_t)calibration[19] << 8 | calibration[18];
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7dbb      	ldrb	r3, [r7, #22]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21a      	sxth	r2, r3
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <BMP280_etalonnage+0x13c>)
 8000698:	801a      	strh	r2, [r3, #0]
	dig_P8 = (int16_t)calibration[21] << 8 | calibration[20];
 800069a:	7e7b      	ldrb	r3, [r7, #25]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	7e3b      	ldrb	r3, [r7, #24]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <BMP280_etalonnage+0x140>)
 80006aa:	801a      	strh	r2, [r3, #0]
	dig_P9 = (int16_t)calibration[23] << 8 | calibration[22];
 80006ac:	7efb      	ldrb	r3, [r7, #27]
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	7ebb      	ldrb	r3, [r7, #26]
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <BMP280_etalonnage+0x144>)
 80006bc:	801a      	strh	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000fc 	.word	0x200000fc
 80006cc:	200000a0 	.word	0x200000a0
 80006d0:	200000a2 	.word	0x200000a2
 80006d4:	200000a4 	.word	0x200000a4
 80006d8:	200000a6 	.word	0x200000a6
 80006dc:	200000a8 	.word	0x200000a8
 80006e0:	200000aa 	.word	0x200000aa
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	200000ae 	.word	0x200000ae
 80006ec:	200000b0 	.word	0x200000b0
 80006f0:	200000b2 	.word	0x200000b2
 80006f4:	200000b4 	.word	0x200000b4
 80006f8:	200000b6 	.word	0x200000b6

080006fc <BMP_get_temperature>:
	var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;
	p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
	return p;
}

uint32_t BMP_get_temperature(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af02      	add	r7, sp, #8
	uint8_t transmit[1];
	for(int i=0; i<3;i++){
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e01b      	b.n	8000740 <BMP_get_temperature+0x44>
		transmit[0]=(BMP280_ADD_TEMP+(i*0x01));
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	3b06      	subs	r3, #6
 800070e:	b2db      	uxtb	r3, r3
 8000710:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1,BMP280_ADDR,transmit,sizeof(uint8_t),HAL_MAX_DELAY);
 8000712:	1d3a      	adds	r2, r7, #4
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	21ee      	movs	r1, #238	; 0xee
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <BMP_get_temperature+0x6c>)
 8000720:	f001 fc32 	bl	8001f88 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1,BMP280_ADDR,&raw_temperature[i],1,HAL_MAX_DELAY);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <BMP_get_temperature+0x70>)
 8000728:	441a      	add	r2, r3
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	21ee      	movs	r1, #238	; 0xee
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <BMP_get_temperature+0x6c>)
 8000736:	f001 fd25 	bl	8002184 <HAL_I2C_Master_Receive>
	for(int i=0; i<3;i++){
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	3301      	adds	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b02      	cmp	r3, #2
 8000744:	dde0      	ble.n	8000708 <BMP_get_temperature+0xc>
	}
	uint32_t temperature_32bit = (raw_temperature[0]<<16)+(raw_temperature[1]<<8)+(raw_temperature[2]);
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <BMP_get_temperature+0x70>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	041a      	lsls	r2, r3, #16
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <BMP_get_temperature+0x70>)
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	4413      	add	r3, r2
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <BMP_get_temperature+0x70>)
 8000756:	7892      	ldrb	r2, [r2, #2]
 8000758:	4413      	add	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
	return temperature_32bit;
 800075c:	68bb      	ldr	r3, [r7, #8]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000fc 	.word	0x200000fc
 800076c:	20000098 	.word	0x20000098

08000770 <BMP_get_press>:

uint32_t BMP_get_press(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af02      	add	r7, sp, #8
	uint8_t transmit[1];
	for(int i=0; i<3;i++){
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e01b      	b.n	80007b4 <BMP_get_press+0x44>
		transmit[0]=(BMP280_ADD_PRESS+(i*0x01));
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	3b09      	subs	r3, #9
 8000782:	b2db      	uxtb	r3, r3
 8000784:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1,BMP280_ADDR,transmit,sizeof(uint8_t),HAL_MAX_DELAY);
 8000786:	1d3a      	adds	r2, r7, #4
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	21ee      	movs	r1, #238	; 0xee
 8000792:	4812      	ldr	r0, [pc, #72]	; (80007dc <BMP_get_press+0x6c>)
 8000794:	f001 fbf8 	bl	8001f88 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1,BMP280_ADDR,&raw_pressure[i],1,HAL_MAX_DELAY);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <BMP_get_press+0x70>)
 800079c:	441a      	add	r2, r3
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	21ee      	movs	r1, #238	; 0xee
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <BMP_get_press+0x6c>)
 80007aa:	f001 fceb 	bl	8002184 <HAL_I2C_Master_Receive>
	for(int i=0; i<3;i++){
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	dde0      	ble.n	800077c <BMP_get_press+0xc>
	}
	uint32_t pression_32bit = (raw_pressure[0]<<16)+(raw_pressure[1]<<8)+(raw_pressure[2]);
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <BMP_get_press+0x70>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	041a      	lsls	r2, r3, #16
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <BMP_get_press+0x70>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	4413      	add	r3, r2
 80007c8:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <BMP_get_press+0x70>)
 80007ca:	7892      	ldrb	r2, [r2, #2]
 80007cc:	4413      	add	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
	return pression_32bit;
 80007d0:	68bb      	ldr	r3, [r7, #8]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000fc 	.word	0x200000fc
 80007e0:	2000009c 	.word	0x2000009c

080007e4 <get_coef_k>:

int get_coef_k(void){
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	return COEF_K;
 80007e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <comm_clean_Rx_order_buffer>:
uint32_t temperature=0;
uint32_t pression=0;
int coefK=0;
char *pangle;

void comm_clean_Rx_order_buffer(void){
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
	for(int i=0;i<ORDER_SIZE+1;i++){
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	e007      	b.n	8000814 <comm_clean_Rx_order_buffer+0x1c>
		Rx_order_buffer[i]=0;
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <comm_clean_Rx_order_buffer+0x30>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<ORDER_SIZE+1;i++){
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b0c      	cmp	r3, #12
 8000818:	ddf4      	ble.n	8000804 <comm_clean_Rx_order_buffer+0xc>
	}
}
 800081a:	bf00      	nop
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	200000b8 	.word	0x200000b8

0800082c <comm_Rx_order_buffer_analyse>:

void comm_Rx_order_buffer_analyse(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	if((Rx_order_buffer[0]==71)&&(Rx_order_buffer[1]==69)&&(Rx_order_buffer[2]==84)&&(Rx_order_buffer[3]==95)){
 8000832:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b47      	cmp	r3, #71	; 0x47
 8000838:	d147      	bne.n	80008ca <comm_Rx_order_buffer_analyse+0x9e>
 800083a:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 800083c:	785b      	ldrb	r3, [r3, #1]
 800083e:	2b45      	cmp	r3, #69	; 0x45
 8000840:	d143      	bne.n	80008ca <comm_Rx_order_buffer_analyse+0x9e>
 8000842:	4b39      	ldr	r3, [pc, #228]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	2b54      	cmp	r3, #84	; 0x54
 8000848:	d13f      	bne.n	80008ca <comm_Rx_order_buffer_analyse+0x9e>
 800084a:	4b37      	ldr	r3, [pc, #220]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 800084c:	78db      	ldrb	r3, [r3, #3]
 800084e:	2b5f      	cmp	r3, #95	; 0x5f
 8000850:	d13b      	bne.n	80008ca <comm_Rx_order_buffer_analyse+0x9e>
		if((Rx_order_buffer[4]==84)){
 8000852:	4b35      	ldr	r3, [pc, #212]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	2b54      	cmp	r3, #84	; 0x54
 8000858:	d10b      	bne.n	8000872 <comm_Rx_order_buffer_analyse+0x46>
			temperature=BMP_get_temperature();
 800085a:	f7ff ff4f 	bl	80006fc <BMP_get_temperature>
 800085e:	4603      	mov	r3, r0
 8000860:	4a32      	ldr	r2, [pc, #200]	; (800092c <comm_Rx_order_buffer_analyse+0x100>)
 8000862:	6013      	str	r3, [r2, #0]
			printf("temperature : %ld\r\n",temperature);
 8000864:	4b31      	ldr	r3, [pc, #196]	; (800092c <comm_Rx_order_buffer_analyse+0x100>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	4831      	ldr	r0, [pc, #196]	; (8000930 <comm_Rx_order_buffer_analyse+0x104>)
 800086c:	f003 fc5c 	bl	8004128 <iprintf>
		if((Rx_order_buffer[4]==84)){
 8000870:	e056      	b.n	8000920 <comm_Rx_order_buffer_analyse+0xf4>
		}
		else if((Rx_order_buffer[4]==80)){
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	2b50      	cmp	r3, #80	; 0x50
 8000878:	d10b      	bne.n	8000892 <comm_Rx_order_buffer_analyse+0x66>
			pression=BMP_get_press();
 800087a:	f7ff ff79 	bl	8000770 <BMP_get_press>
 800087e:	4603      	mov	r3, r0
 8000880:	4a2c      	ldr	r2, [pc, #176]	; (8000934 <comm_Rx_order_buffer_analyse+0x108>)
 8000882:	6013      	str	r3, [r2, #0]
			printf("pression : %ld\r\n",pression);
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <comm_Rx_order_buffer_analyse+0x108>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	482b      	ldr	r0, [pc, #172]	; (8000938 <comm_Rx_order_buffer_analyse+0x10c>)
 800088c:	f003 fc4c 	bl	8004128 <iprintf>
		if((Rx_order_buffer[4]==84)){
 8000890:	e046      	b.n	8000920 <comm_Rx_order_buffer_analyse+0xf4>
		}
		else if((Rx_order_buffer[4]==65)){
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	2b41      	cmp	r3, #65	; 0x41
 8000898:	d108      	bne.n	80008ac <comm_Rx_order_buffer_analyse+0x80>
			//angle=get_angle()
			printf(pangle);
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <comm_Rx_order_buffer_analyse+0x110>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fc42 	bl	8004128 <iprintf>
			printf("reçu GET_A\r\n");
 80008a4:	4826      	ldr	r0, [pc, #152]	; (8000940 <comm_Rx_order_buffer_analyse+0x114>)
 80008a6:	f003 fcc5 	bl	8004234 <puts>
		if((Rx_order_buffer[4]==84)){
 80008aa:	e039      	b.n	8000920 <comm_Rx_order_buffer_analyse+0xf4>
		}
		else if((Rx_order_buffer[4]=75)){
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 80008ae:	224b      	movs	r2, #75	; 0x4b
 80008b0:	711a      	strb	r2, [r3, #4]
			coefK=get_coef_k();
 80008b2:	f7ff ff97 	bl	80007e4 <get_coef_k>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <comm_Rx_order_buffer_analyse+0x118>)
 80008ba:	6013      	str	r3, [r2, #0]
			printf("Coefficient K : %d\r\n", coefK);
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <comm_Rx_order_buffer_analyse+0x118>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4821      	ldr	r0, [pc, #132]	; (8000948 <comm_Rx_order_buffer_analyse+0x11c>)
 80008c4:	f003 fc30 	bl	8004128 <iprintf>
		if((Rx_order_buffer[4]==84)){
 80008c8:	e02a      	b.n	8000920 <comm_Rx_order_buffer_analyse+0xf4>
		}
		else{
			printf("commande invalide\r\n");
		}
	}
	else if(Rx_order_buffer[0]==83){
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b53      	cmp	r3, #83	; 0x53
 80008d0:	d126      	bne.n	8000920 <comm_Rx_order_buffer_analyse+0xf4>
		int rx_index=0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
		for(int i=0;i<11;i++){
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	e013      	b.n	8000904 <comm_Rx_order_buffer_analyse+0xd8>
			if(Rx_order_buffer[i]!=set_k[i]){
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <comm_Rx_order_buffer_analyse+0xfc>)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4919      	ldr	r1, [pc, #100]	; (800094c <comm_Rx_order_buffer_analyse+0x120>)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	440b      	add	r3, r1
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d003      	beq.n	80008f8 <comm_Rx_order_buffer_analyse+0xcc>
				printf("commande invalide\r\n");
 80008f0:	4817      	ldr	r0, [pc, #92]	; (8000950 <comm_Rx_order_buffer_analyse+0x124>)
 80008f2:	f003 fc9f 	bl	8004234 <puts>
 80008f6:	e002      	b.n	80008fe <comm_Rx_order_buffer_analyse+0xd2>
			}
			else{
				rx_index++;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
		for(int i=0;i<11;i++){
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	2b0a      	cmp	r3, #10
 8000908:	dde8      	ble.n	80008dc <comm_Rx_order_buffer_analyse+0xb0>
			}
		}
		if(rx_index==10){
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0a      	cmp	r3, #10
 800090e:	d103      	bne.n	8000918 <comm_Rx_order_buffer_analyse+0xec>
			//set_k()
			printf("SET_K=SET_OK\r\n");
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <comm_Rx_order_buffer_analyse+0x128>)
 8000912:	f003 fc8f 	bl	8004234 <puts>
		}
		else{
			printf("commande invalide\r\n");
		}
	}
}
 8000916:	e003      	b.n	8000920 <comm_Rx_order_buffer_analyse+0xf4>
			printf("commande invalide\r\n");
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <comm_Rx_order_buffer_analyse+0x124>)
 800091a:	f003 fc8b 	bl	8004234 <puts>
}
 800091e:	e7ff      	b.n	8000920 <comm_Rx_order_buffer_analyse+0xf4>
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000b8 	.word	0x200000b8
 800092c:	200000c4 	.word	0x200000c4
 8000930:	08005148 	.word	0x08005148
 8000934:	200000c8 	.word	0x200000c8
 8000938:	0800515c 	.word	0x0800515c
 800093c:	200000d0 	.word	0x200000d0
 8000940:	08005170 	.word	0x08005170
 8000944:	200000cc 	.word	0x200000cc
 8000948:	08005180 	.word	0x08005180
 800094c:	20000000 	.word	0x20000000
 8000950:	08005198 	.word	0x08005198
 8000954:	080051ac 	.word	0x080051ac

08000958 <comm_wait_for_order>:

void comm_wait_for_order(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	printf("entree :\r\n");
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <comm_wait_for_order+0x3c>)
 800095e:	f003 fc69 	bl	8004234 <puts>
	HAL_UART_Receive(&huart2, Rx_order_buffer,ORDER_SIZE,5000);
 8000962:	f241 3388 	movw	r3, #5000	; 0x1388
 8000966:	220c      	movs	r2, #12
 8000968:	490b      	ldr	r1, [pc, #44]	; (8000998 <comm_wait_for_order+0x40>)
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <comm_wait_for_order+0x44>)
 800096c:	f003 f825 	bl	80039ba <HAL_UART_Receive>
	printf("sortie : \r\n");
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <comm_wait_for_order+0x48>)
 8000972:	f003 fc5f 	bl	8004234 <puts>
	HAL_UART_Transmit(&huart2, Rx_order_buffer, ORDER_SIZE,100);
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	220c      	movs	r2, #12
 800097a:	4907      	ldr	r1, [pc, #28]	; (8000998 <comm_wait_for_order+0x40>)
 800097c:	4807      	ldr	r0, [pc, #28]	; (800099c <comm_wait_for_order+0x44>)
 800097e:	f002 ff8a 	bl	8003896 <HAL_UART_Transmit>
	printf("\r\n");
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <comm_wait_for_order+0x4c>)
 8000984:	f003 fc56 	bl	8004234 <puts>
	comm_Rx_order_buffer_analyse();
 8000988:	f7ff ff50 	bl	800082c <comm_Rx_order_buffer_analyse>
	comm_clean_Rx_order_buffer();
 800098c:	f7ff ff34 	bl	80007f8 <comm_clean_Rx_order_buffer>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	080051bc 	.word	0x080051bc
 8000998:	200000b8 	.word	0x200000b8
 800099c:	20000194 	.word	0x20000194
 80009a0:	080051c8 	.word	0x080051c8
 80009a4:	080051d4 	.word	0x080051d4

080009a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009ac:	f000 fc7e 	bl	80012ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009b0:	f000 f81c 	bl	80009ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009b4:	f000 f93e 	bl	8000c34 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80009b8:	f000 f912 	bl	8000be0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80009bc:	f000 f8b8 	bl	8000b30 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80009c0:	f000 f8e4 	bl	8000b8c <MX_USART1_UART_Init>
	MX_CAN1_Init();
 80009c4:	f000 f87e 	bl	8000ac4 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */

	//BMP_get_ID();
	//BMP_send_Configuration();
	motor_CAN_Init_Start();
 80009c8:	f000 f970 	bl	8000cac <motor_CAN_Init_Start>

	printf("bonjour\r\n");
 80009cc:	4806      	ldr	r0, [pc, #24]	; (80009e8 <main+0x40>)
 80009ce:	f003 fc31 	bl	8004234 <puts>
	BMP280_etalonnage();
 80009d2:	f7ff fdef 	bl	80005b4 <BMP280_etalonnage>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		motor_handle();
 80009d6:	f000 f9c5 	bl	8000d64 <motor_handle>
		comm_wait_for_order();
 80009da:	f7ff ffbd 	bl	8000958 <comm_wait_for_order>
		HAL_Delay(1000);
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f000 fcd5 	bl	8001390 <HAL_Delay>
		motor_handle();
 80009e6:	e7f6      	b.n	80009d6 <main+0x2e>
 80009e8:	080051d8 	.word	0x080051d8

080009ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	; 0x50
 80009f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2234      	movs	r2, #52	; 0x34
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fb8c 	bl	8004118 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <SystemClock_Config+0xd0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a28      	ldr	r2, [pc, #160]	; (8000abc <SystemClock_Config+0xd0>)
 8000a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <SystemClock_Config+0xd0>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2310      	movs	r3, #16
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8000a64:	2350      	movs	r3, #80	; 0x50
 8000a66:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 fc21 	bl	80032c0 <HAL_RCC_OscConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000a84:	f000 f90c 	bl	8000ca0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a88:	230f      	movs	r3, #15
 8000a8a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 f8c1 	bl	8002c2c <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8000ab0:	f000 f8f6 	bl	8000ca0 <Error_Handler>
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	; 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000aca:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <MX_CAN1_Init+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ae6:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000aea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000aee:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_CAN1_Init+0x64>)
 8000b16:	f000 fc5f 	bl	80013d8 <HAL_CAN_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8000b20:	f000 f8be 	bl	8000ca0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000d4 	.word	0x200000d4
 8000b2c:	40006400 	.word	0x40006400

08000b30 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b36:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <MX_I2C1_Init+0x54>)
 8000b38:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b3c:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x58>)
 8000b3e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b52:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b6e:	f001 f8c7 	bl	8001d00 <HAL_I2C_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000b78:	f000 f892 	bl	8000ca0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000fc 	.word	0x200000fc
 8000b84:	40005400 	.word	0x40005400
 8000b88:	000186a0 	.word	0x000186a0

08000b8c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_USART1_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	f002 fe1a 	bl	80037fc <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000bce:	f000 f867 	bl	8000ca0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000150 	.word	0x20000150
 8000bdc:	40011000 	.word	0x40011000

08000be0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_USART2_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c18:	f002 fdf0 	bl	80037fc <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000c22:	f000 f83d 	bl	8000ca0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000194 	.word	0x20000194
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_GPIO_Init+0x68>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <motor_CAN_Init_Start>:
uint8_t coef_K;
int tour=0;
uint32_t nouvelle_temperature=0;
uint32_t ancien_temperature=0;

uint8_t motor_CAN_Init_Start(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	pHeader.StdId=STD_ID;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <motor_CAN_Init_Start+0x40>)
 8000cb2:	2261      	movs	r2, #97	; 0x61
 8000cb4:	601a      	str	r2, [r3, #0]
	pHeader.IDE=CAN_ID_STD;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <motor_CAN_Init_Start+0x40>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
	pHeader.RTR=CAN_RTR_DATA;
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <motor_CAN_Init_Start+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
	pHeader.DLC=MOTOR_MODE_AUTO;
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <motor_CAN_Init_Start+0x40>)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	611a      	str	r2, [r3, #16]
	pHeader.TransmitGlobalTime=DISABLE;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <motor_CAN_Init_Start+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	751a      	strb	r2, [r3, #20]

	if(HAL_CAN_Start(&hcan1)==HAL_OK){
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <motor_CAN_Init_Start+0x44>)
 8000cd0:	f000 fc7d 	bl	80015ce <HAL_CAN_Start>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <motor_CAN_Init_Start+0x32>
		return 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e003      	b.n	8000ce6 <motor_CAN_Init_Start+0x3a>
	}
	else{
		printf("\r\nProblème :\r\nHAL_CAN_Start()");
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <motor_CAN_Init_Start+0x48>)
 8000ce0:	f003 fa22 	bl	8004128 <iprintf>
		return 0;
 8000ce4:	2300      	movs	r3, #0
	}
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001dc 	.word	0x200001dc
 8000cf0:	200000d4 	.word	0x200000d4
 8000cf4:	080051e4 	.word	0x080051e4

08000cf8 <motor_tourne>:

uint8_t motor_tourne(uint8_t angular_position, uint8_t rotation_direction){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	printf("est entre\r\n");
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <motor_tourne+0x50>)
 8000d0a:	f003 fa93 	bl	8004234 <puts>
	aData[0]=angular_position;
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <motor_tourne+0x54>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	7013      	strb	r3, [r2, #0]
	aData[1]=rotation_direction;
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <motor_tourne+0x54>)
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	7053      	strb	r3, [r2, #1]
	if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox)==HAL_OK){
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <motor_tourne+0x58>)
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <motor_tourne+0x54>)
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <motor_tourne+0x5c>)
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <motor_tourne+0x60>)
 8000d22:	f000 fc98 	bl	8001656 <HAL_CAN_AddTxMessage>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <motor_tourne+0x3e>
		printf("hal_ok\r\n");
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <motor_tourne+0x64>)
 8000d2e:	f003 fa81 	bl	8004234 <puts>
		return 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e003      	b.n	8000d3e <motor_tourne+0x46>
	}
	else{
		printf("Problème :\r\n Pas de transmission de trame CAN\r\n");
 8000d36:	480a      	ldr	r0, [pc, #40]	; (8000d60 <motor_tourne+0x68>)
 8000d38:	f003 fa7c 	bl	8004234 <puts>
		return 0;
 8000d3c:	2300      	movs	r3, #0
	}
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	08005204 	.word	0x08005204
 8000d4c:	200001d8 	.word	0x200001d8
 8000d50:	200001f4 	.word	0x200001f4
 8000d54:	200001dc 	.word	0x200001dc
 8000d58:	200000d4 	.word	0x200000d4
 8000d5c:	08005210 	.word	0x08005210
 8000d60:	08005218 	.word	0x08005218

08000d64 <motor_handle>:

void motor_handle(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	nouvelle_temperature=BMP_get_temperature();
 8000d68:	f7ff fcc8 	bl	80006fc <BMP_get_temperature>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <motor_handle+0x80>)
 8000d70:	6013      	str	r3, [r2, #0]
	if(((int)(nouvelle_temperature/COEF_K))<((int)((ancien_temperature)/COEF_K))){
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <motor_handle+0x80>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <motor_handle+0x84>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	099b      	lsrs	r3, r3, #6
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <motor_handle+0x88>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <motor_handle+0x84>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	099b      	lsrs	r3, r3, #6
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	da07      	bge.n	8000da0 <motor_handle+0x3c>
		//met la clim car il a froid
		printf("moteur_tourne +\r\n");
 8000d90:	4817      	ldr	r0, [pc, #92]	; (8000df0 <motor_handle+0x8c>)
 8000d92:	f003 fa4f 	bl	8004234 <puts>
		motor_tourne(ANGLE_90, ANGLE_NEGATIVE);
 8000d96:	2101      	movs	r1, #1
 8000d98:	205a      	movs	r0, #90	; 0x5a
 8000d9a:	f7ff ffad 	bl	8000cf8 <motor_tourne>
 8000d9e:	e01a      	b.n	8000dd6 <motor_handle+0x72>
	}
	else if(((int)(nouvelle_temperature/COEF_K))>((int)((ancien_temperature)/COEF_K))){
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <motor_handle+0x80>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <motor_handle+0x84>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	099b      	lsrs	r3, r3, #6
 8000dac:	4619      	mov	r1, r3
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <motor_handle+0x88>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <motor_handle+0x84>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	099b      	lsrs	r3, r3, #6
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	dd07      	ble.n	8000dce <motor_handle+0x6a>
		//met le chauffage car il a froid
		printf("moteur tourne -\r\n");
 8000dbe:	480d      	ldr	r0, [pc, #52]	; (8000df4 <motor_handle+0x90>)
 8000dc0:	f003 fa38 	bl	8004234 <puts>
		motor_tourne(ANGLE_90,ANGLE_POSITIVE);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	205a      	movs	r0, #90	; 0x5a
 8000dc8:	f7ff ff96 	bl	8000cf8 <motor_tourne>
 8000dcc:	e003      	b.n	8000dd6 <motor_handle+0x72>
	}
	else{
		motor_tourne(0x00,ANGLE_POSITIVE);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff ff91 	bl	8000cf8 <motor_tourne>
	}
	ancien_temperature=nouvelle_temperature;
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <motor_handle+0x80>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <motor_handle+0x88>)
 8000ddc:	6013      	str	r3, [r2, #0]
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200001f8 	.word	0x200001f8
 8000de8:	10624dd3 	.word	0x10624dd3
 8000dec:	200001fc 	.word	0x200001fc
 8000df0:	08005248 	.word	0x08005248
 8000df4:	0800525c 	.word	0x0800525c

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e36:	2007      	movs	r0, #7
 8000e38:	f000 fd9a 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_CAN_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12c      	bne.n	8000ec4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_CAN_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_CAN_MspInit+0x88>)
 8000e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_CAN_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_CAN_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_CAN_MspInit+0x88>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_CAN_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eb4:	2309      	movs	r3, #9
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_CAN_MspInit+0x8c>)
 8000ec0:	f000 fd8a 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40006400 	.word	0x40006400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_I2C_MspInit+0x84>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f16:	23c0      	movs	r3, #192	; 0xc0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1a:	2312      	movs	r3, #18
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f26:	2304      	movs	r3, #4
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <HAL_I2C_MspInit+0x8c>)
 8000f32:	f000 fd51 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a32      	ldr	r2, [pc, #200]	; (8001050 <HAL_UART_MspInit+0xe8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d12d      	bne.n	8000fe6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_UART_MspInit+0xec>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a30      	ldr	r2, [pc, #192]	; (8001054 <HAL_UART_MspInit+0xec>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	; (8001054 <HAL_UART_MspInit+0xec>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <HAL_UART_MspInit+0xec>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a29      	ldr	r2, [pc, #164]	; (8001054 <HAL_UART_MspInit+0xec>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b27      	ldr	r3, [pc, #156]	; (8001054 <HAL_UART_MspInit+0xec>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481e      	ldr	r0, [pc, #120]	; (8001058 <HAL_UART_MspInit+0xf0>)
 8000fe0:	f000 fcfa 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe4:	e030      	b.n	8001048 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_UART_MspInit+0xf4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d12b      	bne.n	8001048 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_UART_MspInit+0xec>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_UART_MspInit+0xec>)
 8000ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_UART_MspInit+0xec>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_UART_MspInit+0xec>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_UART_MspInit+0xec>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_UART_MspInit+0xec>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001028:	230c      	movs	r3, #12
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001038:	2307      	movs	r3, #7
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0xf0>)
 8001044:	f000 fcc8 	bl	80019d8 <HAL_GPIO_Init>
}
 8001048:	bf00      	nop
 800104a:	3730      	adds	r7, #48	; 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40011000 	.word	0x40011000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000
 800105c:	40004400 	.word	0x40004400

08001060 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001068:	1d39      	adds	r1, r7, #4
 800106a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106e:	2201      	movs	r2, #1
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <__io_putchar+0x30>)
 8001072:	f002 fc10 	bl	8003896 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001076:	1d39      	adds	r1, r7, #4
 8001078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107c:	2201      	movs	r2, #1
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <__io_putchar+0x34>)
 8001080:	f002 fc09 	bl	8003896 <HAL_UART_Transmit>

  return ch;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000194 	.word	0x20000194
 8001094:	20000150 	.word	0x20000150

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 f934 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e00a      	b.n	8001114 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010fe:	f3af 8000 	nop.w
 8001102:	4601      	mov	r1, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	b2ca      	uxtb	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf0      	blt.n	80010fe <_read+0x12>
	}

return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	e009      	b.n	800114c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff8d 	bl	8001060 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbf1      	blt.n	8001138 <_write+0x12>
	}
	return len;
 8001154:	687b      	ldr	r3, [r7, #4]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_close>:

int _close(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	return -1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001186:	605a      	str	r2, [r3, #4]
	return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_isatty>:

int _isatty(int file)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	return 1;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <_sbrk+0x5c>)
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <_sbrk+0x60>)
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <_sbrk+0x64>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <_sbrk+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f8:	f002 ff64 	bl	80040c4 <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	e009      	b.n	800121c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <_sbrk+0x64>)
 8001218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20020000 	.word	0x20020000
 8001228:	00000400 	.word	0x00000400
 800122c:	20000200 	.word	0x20000200
 8001230:	20000218 	.word	0x20000218

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125e:	490e      	ldr	r1, [pc, #56]	; (8001298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001274:	4c0b      	ldr	r4, [pc, #44]	; (80012a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001282:	f7ff ffd7 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f002 ff23 	bl	80040d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fb8d 	bl	80009a8 <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800129c:	08005330 	.word	0x08005330
  ldr r2, =_sbss
 80012a0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80012a4:	20000218 	.word	0x20000218

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 fb4b 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fd8a 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fb55 	bl	80019be <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 fb2b 	bl	8001986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000000c 	.word	0x2000000c
 8001348:	20000014 	.word	0x20000014
 800134c:	20000010 	.word	0x20000010

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000014 	.word	0x20000014
 8001374:	20000204 	.word	0x20000204

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000204 	.word	0x20000204

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000014 	.word	0x20000014

080013d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0ed      	b.n	80015c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fd26 	bl	8000e48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800140c:	f7ff ffb4 	bl	8001378 <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001412:	e012      	b.n	800143a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001414:	f7ff ffb0 	bl	8001378 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b0a      	cmp	r3, #10
 8001420:	d90b      	bls.n	800143a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2205      	movs	r2, #5
 8001432:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0c5      	b.n	80015c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0e5      	beq.n	8001414 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0202 	bic.w	r2, r2, #2
 8001456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001458:	f7ff ff8e 	bl	8001378 <HAL_GetTick>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800145e:	e012      	b.n	8001486 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001460:	f7ff ff8a 	bl	8001378 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b0a      	cmp	r3, #10
 800146c:	d90b      	bls.n	8001486 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2205      	movs	r2, #5
 800147e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e09f      	b.n	80015c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1e5      	bne.n	8001460 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e1b      	ldrb	r3, [r3, #24]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e007      	b.n	80014be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7e5b      	ldrb	r3, [r3, #25]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d108      	bne.n	80014d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e007      	b.n	80014e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e9b      	ldrb	r3, [r3, #26]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d108      	bne.n	8001502 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0220 	orr.w	r2, r2, #32
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e007      	b.n	8001512 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0220 	bic.w	r2, r2, #32
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7edb      	ldrb	r3, [r3, #27]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d108      	bne.n	800152c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0210 	bic.w	r2, r2, #16
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e007      	b.n	800153c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0210 	orr.w	r2, r2, #16
 800153a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7f1b      	ldrb	r3, [r3, #28]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0208 	orr.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e007      	b.n	8001566 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0208 	bic.w	r2, r2, #8
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7f5b      	ldrb	r3, [r3, #29]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0204 	orr.w	r2, r2, #4
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e007      	b.n	8001590 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0204 	bic.w	r2, r2, #4
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	ea42 0103 	orr.w	r1, r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d12e      	bne.n	8001640 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2202      	movs	r2, #2
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015fa:	f7ff febd 	bl	8001378 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001600:	e012      	b.n	8001628 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001602:	f7ff feb9 	bl	8001378 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b0a      	cmp	r3, #10
 800160e:	d90b      	bls.n	8001628 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2205      	movs	r2, #5
 8001620:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e012      	b.n	800164e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1e5      	bne.n	8001602 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	e006      	b.n	800164e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
  }
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001656:	b480      	push	{r7}
 8001658:	b089      	sub	sp, #36	; 0x24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001674:	7ffb      	ldrb	r3, [r7, #31]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d003      	beq.n	8001682 <HAL_CAN_AddTxMessage+0x2c>
 800167a:	7ffb      	ldrb	r3, [r7, #31]
 800167c:	2b02      	cmp	r3, #2
 800167e:	f040 80b8 	bne.w	80017f2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10a      	bne.n	80016a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001692:	2b00      	cmp	r3, #0
 8001694:	d105      	bne.n	80016a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a0 	beq.w	80017e2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	0e1b      	lsrs	r3, r3, #24
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d907      	bls.n	80016c2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e09e      	b.n	8001800 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10d      	bne.n	80016f0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016de:	68f9      	ldr	r1, [r7, #12]
 80016e0:	6809      	ldr	r1, [r1, #0]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3318      	adds	r3, #24
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	440b      	add	r3, r1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e00f      	b.n	8001710 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001700:	68f9      	ldr	r1, [r7, #12]
 8001702:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001704:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3318      	adds	r3, #24
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	440b      	add	r3, r1
 800170e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3318      	adds	r3, #24
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	440b      	add	r3, r1
 8001720:	3304      	adds	r3, #4
 8001722:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	7d1b      	ldrb	r3, [r3, #20]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d111      	bne.n	8001750 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3318      	adds	r3, #24
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	4413      	add	r3, r2
 8001738:	3304      	adds	r3, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	6811      	ldr	r1, [r2, #0]
 8001740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3318      	adds	r3, #24
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	440b      	add	r3, r1
 800174c:	3304      	adds	r3, #4
 800174e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3307      	adds	r3, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	061a      	lsls	r2, r3, #24
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3306      	adds	r3, #6
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3305      	adds	r3, #5
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	4313      	orrs	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	3204      	adds	r2, #4
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4610      	mov	r0, r2
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	6811      	ldr	r1, [r2, #0]
 8001778:	ea43 0200 	orr.w	r2, r3, r0
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	440b      	add	r3, r1
 8001782:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001786:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3303      	adds	r3, #3
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	061a      	lsls	r2, r3, #24
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3302      	adds	r3, #2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4313      	orrs	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	4610      	mov	r0, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	6811      	ldr	r1, [r2, #0]
 80017ae:	ea43 0200 	orr.w	r2, r3, r0
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	440b      	add	r3, r1
 80017b8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3318      	adds	r3, #24
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6811      	ldr	r1, [r2, #0]
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3318      	adds	r3, #24
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	440b      	add	r3, r1
 80017dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e00e      	b.n	8001800 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e006      	b.n	8001800 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
  }
}
 8001800:	4618      	mov	r0, r3
 8001802:	3724      	adds	r7, #36	; 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
         );
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193c:	d301      	bcc.n	8001942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193e:	2301      	movs	r3, #1
 8001940:	e00f      	b.n	8001962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <SysTick_Config+0x40>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194a:	210f      	movs	r1, #15
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f7ff ff8e 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <SysTick_Config+0x40>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <SysTick_Config+0x40>)
 800195c:	2207      	movs	r2, #7
 800195e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff47 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001998:	f7ff ff5c 	bl	8001854 <__NVIC_GetPriorityGrouping>
 800199c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ff8e 	bl	80018c4 <NVIC_EncodePriority>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffb0 	bl	800192c <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e165      	b.n	8001cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8154 	bne.w	8001cba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80ae 	beq.w	8001cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a5c      	ldr	r2, [pc, #368]	; (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_GPIO_Init+0x308>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_GPIO_Init+0x30c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x216>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	; (8001ce8 <HAL_GPIO_Init+0x310>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x212>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	; (8001cec <HAL_GPIO_Init+0x314>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_GPIO_Init+0x318>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x20a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x31c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x206>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <HAL_GPIO_Init+0x320>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x202>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a31      	ldr	r2, [pc, #196]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae96 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e12b      	b.n	8001f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff f8d6 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2224      	movs	r2, #36	; 0x24
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d64:	f001 f854 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8001d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a81      	ldr	r2, [pc, #516]	; (8001f74 <HAL_I2C_Init+0x274>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d807      	bhi.n	8001d84 <HAL_I2C_Init+0x84>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a80      	ldr	r2, [pc, #512]	; (8001f78 <HAL_I2C_Init+0x278>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	2300      	movhi	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	e006      	b.n	8001d92 <HAL_I2C_Init+0x92>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a7d      	ldr	r2, [pc, #500]	; (8001f7c <HAL_I2C_Init+0x27c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	bf94      	ite	ls
 8001d8c:	2301      	movls	r3, #1
 8001d8e:	2300      	movhi	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0e7      	b.n	8001f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4a78      	ldr	r2, [pc, #480]	; (8001f80 <HAL_I2C_Init+0x280>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0c9b      	lsrs	r3, r3, #18
 8001da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a6a      	ldr	r2, [pc, #424]	; (8001f74 <HAL_I2C_Init+0x274>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_I2C_Init+0xd4>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	e009      	b.n	8001de8 <HAL_I2C_Init+0xe8>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	4a69      	ldr	r2, [pc, #420]	; (8001f84 <HAL_I2C_Init+0x284>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	3301      	adds	r3, #1
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	495c      	ldr	r1, [pc, #368]	; (8001f74 <HAL_I2C_Init+0x274>)
 8001e04:	428b      	cmp	r3, r1
 8001e06:	d819      	bhi.n	8001e3c <HAL_I2C_Init+0x13c>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e59      	subs	r1, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e16:	1c59      	adds	r1, r3, #1
 8001e18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_I2C_Init+0x138>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1e59      	subs	r1, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e36:	e051      	b.n	8001edc <HAL_I2C_Init+0x1dc>
 8001e38:	2304      	movs	r3, #4
 8001e3a:	e04f      	b.n	8001edc <HAL_I2C_Init+0x1dc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d111      	bne.n	8001e68 <HAL_I2C_Init+0x168>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	440b      	add	r3, r1
 8001e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e012      	b.n	8001e8e <HAL_I2C_Init+0x18e>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e58      	subs	r0, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	0099      	lsls	r1, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Init+0x196>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e022      	b.n	8001edc <HAL_I2C_Init+0x1dc>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10e      	bne.n	8001ebc <HAL_I2C_Init+0x1bc>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1e58      	subs	r0, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	440b      	add	r3, r1
 8001eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eba:	e00f      	b.n	8001edc <HAL_I2C_Init+0x1dc>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e58      	subs	r0, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	0099      	lsls	r1, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	6809      	ldr	r1, [r1, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6911      	ldr	r1, [r2, #16]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	000186a0 	.word	0x000186a0
 8001f78:	001e847f 	.word	0x001e847f
 8001f7c:	003d08ff 	.word	0x003d08ff
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	10624dd3 	.word	0x10624dd3

08001f88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	817b      	strh	r3, [r7, #10]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff f9ec 	bl	8001378 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	f040 80e0 	bne.w	8002170 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2319      	movs	r3, #25
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4970      	ldr	r1, [pc, #448]	; (800217c <HAL_I2C_Master_Transmit+0x1f4>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fc58 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e0d3      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_I2C_Master_Transmit+0x50>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e0cc      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d007      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2221      	movs	r2, #33	; 0x21
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2210      	movs	r2, #16
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	893a      	ldrh	r2, [r7, #8]
 800202e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a50      	ldr	r2, [pc, #320]	; (8002180 <HAL_I2C_Master_Transmit+0x1f8>)
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	6a3a      	ldr	r2, [r7, #32]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fac2 	bl	80025d0 <I2C_MasterRequestWrite>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e08d      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800206c:	e066      	b.n	800213c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fcd2 	bl	8002a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b04      	cmp	r3, #4
 8002084:	d107      	bne.n	8002096 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002094:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06b      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d11b      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x188>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d017      	beq.n	8002110 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	6a39      	ldr	r1, [r7, #32]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fcc2 	bl	8002a9e <I2C_WaitOnBTFFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2b04      	cmp	r3, #4
 8002126:	d107      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002136:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e01a      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d194      	bne.n	800206e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e000      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	00100002 	.word	0x00100002
 8002180:	ffff0000 	.word	0xffff0000

08002184 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	461a      	mov	r2, r3
 8002190:	460b      	mov	r3, r1
 8002192:	817b      	strh	r3, [r7, #10]
 8002194:	4613      	mov	r3, r2
 8002196:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff f8ee 	bl	8001378 <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	f040 820b 	bne.w	80025c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	497c      	ldr	r1, [pc, #496]	; (80023a8 <HAL_I2C_Master_Receive+0x224>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fb5a 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	e1fe      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2C_Master_Receive+0x50>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e1f7      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d007      	beq.n	80021fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002208:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2222      	movs	r2, #34	; 0x22
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2210      	movs	r2, #16
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a5c      	ldr	r2, [pc, #368]	; (80023ac <HAL_I2C_Master_Receive+0x228>)
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800223c:	8979      	ldrh	r1, [r7, #10]
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fa46 	bl	80026d4 <I2C_MasterRequestRead>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1b8      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	d113      	bne.n	8002282 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e18c      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	2b01      	cmp	r3, #1
 8002288:	d11b      	bne.n	80022c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e16c      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d11b      	bne.n	8002302 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	e14c      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002328:	e138      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	2b03      	cmp	r3, #3
 8002330:	f200 80f1 	bhi.w	8002516 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	2b01      	cmp	r3, #1
 800233a:	d123      	bne.n	8002384 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fbed 	bl	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e139      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002382:	e10b      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	2b02      	cmp	r3, #2
 800238a:	d14e      	bne.n	800242a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	2200      	movs	r2, #0
 8002394:	4906      	ldr	r1, [pc, #24]	; (80023b0 <HAL_I2C_Master_Receive+0x22c>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fa6a 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e10e      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
 80023a6:	bf00      	nop
 80023a8:	00100002 	.word	0x00100002
 80023ac:	ffff0000 	.word	0xffff0000
 80023b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002428:	e0b8      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	2200      	movs	r2, #0
 8002432:	4966      	ldr	r1, [pc, #408]	; (80025cc <HAL_I2C_Master_Receive+0x448>)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fa1b 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0bf      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	2200      	movs	r2, #0
 800248e:	494f      	ldr	r1, [pc, #316]	; (80025cc <HAL_I2C_Master_Receive+0x448>)
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f9ed 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e091      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002514:	e042      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fb00 	bl	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e04c      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d118      	bne.n	800259c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f aec2 	bne.w	800232a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	00010004 	.word	0x00010004

080025d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	460b      	mov	r3, r1
 80025de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d006      	beq.n	80025fa <I2C_MasterRequestWrite+0x2a>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d003      	beq.n	80025fa <I2C_MasterRequestWrite+0x2a>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f8:	d108      	bne.n	800260c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e00b      	b.n	8002624 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	2b12      	cmp	r3, #18
 8002612:	d107      	bne.n	8002624 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002622:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f91d 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264a:	d103      	bne.n	8002654 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e035      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002660:	d108      	bne.n	8002674 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	e01b      	b.n	80026ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	11db      	asrs	r3, r3, #7
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f003 0306 	and.w	r3, r3, #6
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f063 030f 	orn	r3, r3, #15
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <I2C_MasterRequestWrite+0xfc>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f943 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e010      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <I2C_MasterRequestWrite+0x100>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f933 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010008 	.word	0x00010008
 80026d0:	00010002 	.word	0x00010002

080026d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	460b      	mov	r3, r1
 80026e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d006      	beq.n	800270e <I2C_MasterRequestRead+0x3a>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d003      	beq.n	800270e <I2C_MasterRequestRead+0x3a>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800270c:	d108      	bne.n	8002720 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e00b      	b.n	8002738 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	2b11      	cmp	r3, #17
 8002726:	d107      	bne.n	8002738 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002736:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f893 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275e:	d103      	bne.n	8002768 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e079      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002774:	d108      	bne.n	8002788 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	e05f      	b.n	8002848 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002788:	897b      	ldrh	r3, [r7, #10]
 800278a:	11db      	asrs	r3, r3, #7
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0306 	and.w	r3, r3, #6
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f063 030f 	orn	r3, r3, #15
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4930      	ldr	r1, [pc, #192]	; (8002868 <I2C_MasterRequestRead+0x194>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f8b9 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e054      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4929      	ldr	r1, [pc, #164]	; (800286c <I2C_MasterRequestRead+0x198>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8a9 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e044      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f831 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002822:	d103      	bne.n	800282c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e017      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	11db      	asrs	r3, r3, #7
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 0306 	and.w	r3, r3, #6
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f063 030e 	orn	r3, r3, #14
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <I2C_MasterRequestRead+0x198>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f865 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010008 	.word	0x00010008
 800286c:	00010002 	.word	0x00010002

08002870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002880:	e025      	b.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d021      	beq.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7fe fd75 	bl	8001378 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e023      	b.n	8002916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d10d      	bne.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4013      	ands	r3, r2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	e00c      	b.n	800290e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4013      	ands	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	429a      	cmp	r2, r3
 8002912:	d0b6      	beq.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292c:	e051      	b.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d123      	bne.n	8002986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f043 0204 	orr.w	r2, r3, #4
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e046      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d021      	beq.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7fe fcf3 	bl	8001378 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e020      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10c      	bne.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4013      	ands	r3, r2
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bf14      	ite	ne
 80029ee:	2301      	movne	r3, #1
 80029f0:	2300      	moveq	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e00b      	b.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d18d      	bne.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a28:	e02d      	b.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f8ce 	bl	8002bcc <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e02d      	b.n	8002a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d021      	beq.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fc99 	bl	8001378 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d116      	bne.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d1ca      	bne.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aaa:	e02d      	b.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f88d 	bl	8002bcc <I2C_IsAcknowledgeFailed>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e02d      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d021      	beq.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7fe fc58 	bl	8001378 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e007      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d1ca      	bne.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b2c:	e042      	b.n	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d119      	bne.n	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0210 	mvn.w	r2, #16
 8002b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e029      	b.n	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7fe fc02 	bl	8001378 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e007      	b.n	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d1b5      	bne.n	8002b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d11b      	bne.n	8002c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f043 0204 	orr.w	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0cc      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d90c      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b63      	ldr	r3, [pc, #396]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0b8      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d020      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca4:	4b50      	ldr	r3, [pc, #320]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	494d      	ldr	r1, [pc, #308]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d044      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d119      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cea:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e067      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4934      	ldr	r1, [pc, #208]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fb2c 	bl	8001378 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fe fb28 	bl	8001378 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e04f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d20c      	bcs.n	8002d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e032      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4916      	ldr	r1, [pc, #88]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	490e      	ldr	r1, [pc, #56]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db2:	f000 f855 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	490a      	ldr	r1, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	5ccb      	ldrb	r3, [r1, r3]
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fa8c 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023c00 	.word	0x40023c00
 8002de8:	40023800 	.word	0x40023800
 8002dec:	08005270 	.word	0x08005270
 8002df0:	2000000c 	.word	0x2000000c
 8002df4:	20000010 	.word	0x20000010

08002df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000000c 	.word	0x2000000c

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e14:	f7ff fff0 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08005280 	.word	0x08005280

08002e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e3c:	f7ff ffdc 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0b5b      	lsrs	r3, r3, #13
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	08005280 	.word	0x08005280

08002e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b0ae      	sub	sp, #184	; 0xb8
 8002e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e86:	4bcb      	ldr	r3, [pc, #812]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	f200 8206 	bhi.w	80032a0 <HAL_RCC_GetSysClockFreq+0x440>
 8002e94:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002ed1 	.word	0x08002ed1
 8002ea0:	080032a1 	.word	0x080032a1
 8002ea4:	080032a1 	.word	0x080032a1
 8002ea8:	080032a1 	.word	0x080032a1
 8002eac:	08002ed9 	.word	0x08002ed9
 8002eb0:	080032a1 	.word	0x080032a1
 8002eb4:	080032a1 	.word	0x080032a1
 8002eb8:	080032a1 	.word	0x080032a1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	080032a1 	.word	0x080032a1
 8002ec4:	080032a1 	.word	0x080032a1
 8002ec8:	080032a1 	.word	0x080032a1
 8002ecc:	080030d1 	.word	0x080030d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4bb9      	ldr	r3, [pc, #740]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ed6:	e1e7      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed8:	4bb8      	ldr	r3, [pc, #736]	; (80031bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ede:	e1e3      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee0:	4bb4      	ldr	r3, [pc, #720]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eec:	4bb1      	ldr	r3, [pc, #708]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d071      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef8:	4bae      	ldr	r3, [pc, #696]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f04:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	0159      	lsls	r1, r3, #5
 8002f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f30:	0150      	lsls	r0, r2, #5
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4621      	mov	r1, r4
 8002f38:	1a51      	subs	r1, r2, r1
 8002f3a:	6439      	str	r1, [r7, #64]	; 0x40
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f42:	647b      	str	r3, [r7, #68]	; 0x44
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f50:	4649      	mov	r1, r9
 8002f52:	018b      	lsls	r3, r1, #6
 8002f54:	4641      	mov	r1, r8
 8002f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	018a      	lsls	r2, r1, #6
 8002f5e:	4641      	mov	r1, r8
 8002f60:	1a51      	subs	r1, r2, r1
 8002f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f64:	4649      	mov	r1, r9
 8002f66:	eb63 0301 	sbc.w	r3, r3, r1
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f78:	4649      	mov	r1, r9
 8002f7a:	00cb      	lsls	r3, r1, #3
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f82:	4641      	mov	r1, r8
 8002f84:	00ca      	lsls	r2, r1, #3
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	189b      	adds	r3, r3, r2
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
 8002f92:	462b      	mov	r3, r5
 8002f94:	460a      	mov	r2, r1
 8002f96:	eb42 0303 	adc.w	r3, r2, r3
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fa8:	4629      	mov	r1, r5
 8002faa:	024b      	lsls	r3, r1, #9
 8002fac:	4621      	mov	r1, r4
 8002fae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	024a      	lsls	r2, r1, #9
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fcc:	f7fd f970 	bl	80002b0 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fda:	e067      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fe8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ffa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ffe:	4622      	mov	r2, r4
 8003000:	462b      	mov	r3, r5
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	0159      	lsls	r1, r3, #5
 800300c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003010:	0150      	lsls	r0, r2, #5
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4621      	mov	r1, r4
 8003018:	1a51      	subs	r1, r2, r1
 800301a:	62b9      	str	r1, [r7, #40]	; 0x28
 800301c:	4629      	mov	r1, r5
 800301e:	eb63 0301 	sbc.w	r3, r3, r1
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003030:	4649      	mov	r1, r9
 8003032:	018b      	lsls	r3, r1, #6
 8003034:	4641      	mov	r1, r8
 8003036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303a:	4641      	mov	r1, r8
 800303c:	018a      	lsls	r2, r1, #6
 800303e:	4641      	mov	r1, r8
 8003040:	ebb2 0a01 	subs.w	sl, r2, r1
 8003044:	4649      	mov	r1, r9
 8003046:	eb63 0b01 	sbc.w	fp, r3, r1
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003056:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800305a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800305e:	4692      	mov	sl, r2
 8003060:	469b      	mov	fp, r3
 8003062:	4623      	mov	r3, r4
 8003064:	eb1a 0303 	adds.w	r3, sl, r3
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	462b      	mov	r3, r5
 800306c:	eb4b 0303 	adc.w	r3, fp, r3
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800307e:	4629      	mov	r1, r5
 8003080:	028b      	lsls	r3, r1, #10
 8003082:	4621      	mov	r1, r4
 8003084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003088:	4621      	mov	r1, r4
 800308a:	028a      	lsls	r2, r1, #10
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003094:	2200      	movs	r2, #0
 8003096:	673b      	str	r3, [r7, #112]	; 0x70
 8003098:	677a      	str	r2, [r7, #116]	; 0x74
 800309a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800309e:	f7fd f907 	bl	80002b0 <__aeabi_uldivmod>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4613      	mov	r3, r2
 80030a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	3301      	adds	r3, #1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030ce:	e0eb      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d0:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030dc:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d06b      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e8:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	2200      	movs	r2, #0
 80030f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fa:	663b      	str	r3, [r7, #96]	; 0x60
 80030fc:	2300      	movs	r3, #0
 80030fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003100:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003104:	4622      	mov	r2, r4
 8003106:	462b      	mov	r3, r5
 8003108:	f04f 0000 	mov.w	r0, #0
 800310c:	f04f 0100 	mov.w	r1, #0
 8003110:	0159      	lsls	r1, r3, #5
 8003112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003116:	0150      	lsls	r0, r2, #5
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4621      	mov	r1, r4
 800311e:	1a51      	subs	r1, r2, r1
 8003120:	61b9      	str	r1, [r7, #24]
 8003122:	4629      	mov	r1, r5
 8003124:	eb63 0301 	sbc.w	r3, r3, r1
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003136:	4659      	mov	r1, fp
 8003138:	018b      	lsls	r3, r1, #6
 800313a:	4651      	mov	r1, sl
 800313c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003140:	4651      	mov	r1, sl
 8003142:	018a      	lsls	r2, r1, #6
 8003144:	4651      	mov	r1, sl
 8003146:	ebb2 0801 	subs.w	r8, r2, r1
 800314a:	4659      	mov	r1, fp
 800314c:	eb63 0901 	sbc.w	r9, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800315c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003160:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003164:	4690      	mov	r8, r2
 8003166:	4699      	mov	r9, r3
 8003168:	4623      	mov	r3, r4
 800316a:	eb18 0303 	adds.w	r3, r8, r3
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	462b      	mov	r3, r5
 8003172:	eb49 0303 	adc.w	r3, r9, r3
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003184:	4629      	mov	r1, r5
 8003186:	024b      	lsls	r3, r1, #9
 8003188:	4621      	mov	r1, r4
 800318a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800318e:	4621      	mov	r1, r4
 8003190:	024a      	lsls	r2, r1, #9
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800319a:	2200      	movs	r2, #0
 800319c:	65bb      	str	r3, [r7, #88]	; 0x58
 800319e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031a4:	f7fd f884 	bl	80002b0 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4613      	mov	r3, r2
 80031ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b2:	e065      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x420>
 80031b4:	40023800 	.word	0x40023800
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c0:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	2200      	movs	r2, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	4611      	mov	r1, r2
 80031cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031d0:	653b      	str	r3, [r7, #80]	; 0x50
 80031d2:	2300      	movs	r3, #0
 80031d4:	657b      	str	r3, [r7, #84]	; 0x54
 80031d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031da:	4642      	mov	r2, r8
 80031dc:	464b      	mov	r3, r9
 80031de:	f04f 0000 	mov.w	r0, #0
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	0159      	lsls	r1, r3, #5
 80031e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ec:	0150      	lsls	r0, r2, #5
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4641      	mov	r1, r8
 80031f4:	1a51      	subs	r1, r2, r1
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	4649      	mov	r1, r9
 80031fa:	eb63 0301 	sbc.w	r3, r3, r1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800320c:	4659      	mov	r1, fp
 800320e:	018b      	lsls	r3, r1, #6
 8003210:	4651      	mov	r1, sl
 8003212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003216:	4651      	mov	r1, sl
 8003218:	018a      	lsls	r2, r1, #6
 800321a:	4651      	mov	r1, sl
 800321c:	1a54      	subs	r4, r2, r1
 800321e:	4659      	mov	r1, fp
 8003220:	eb63 0501 	sbc.w	r5, r3, r1
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	00eb      	lsls	r3, r5, #3
 800322e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003232:	00e2      	lsls	r2, r4, #3
 8003234:	4614      	mov	r4, r2
 8003236:	461d      	mov	r5, r3
 8003238:	4643      	mov	r3, r8
 800323a:	18e3      	adds	r3, r4, r3
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	464b      	mov	r3, r9
 8003240:	eb45 0303 	adc.w	r3, r5, r3
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003252:	4629      	mov	r1, r5
 8003254:	028b      	lsls	r3, r1, #10
 8003256:	4621      	mov	r1, r4
 8003258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800325c:	4621      	mov	r1, r4
 800325e:	028a      	lsls	r2, r1, #10
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003268:	2200      	movs	r2, #0
 800326a:	64bb      	str	r3, [r7, #72]	; 0x48
 800326c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800326e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003272:	f7fd f81d 	bl	80002b0 <__aeabi_uldivmod>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4613      	mov	r3, r2
 800327c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	0f1b      	lsrs	r3, r3, #28
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800328e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800329e:	e003      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80032a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	37b8      	adds	r7, #184	; 0xb8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	00f42400 	.word	0x00f42400

080032c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e28d      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8083 	beq.w	80033e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032e0:	4b94      	ldr	r3, [pc, #592]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d019      	beq.n	8003320 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032ec:	4b91      	ldr	r3, [pc, #580]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032f8:	4b8e      	ldr	r3, [pc, #568]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003304:	d00c      	beq.n	8003320 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d112      	bne.n	8003338 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003312:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331e:	d10b      	bne.n	8003338 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	4b84      	ldr	r3, [pc, #528]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d05b      	beq.n	80033e4 <HAL_RCC_OscConfig+0x124>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d157      	bne.n	80033e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e25a      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d106      	bne.n	8003350 <HAL_RCC_OscConfig+0x90>
 8003342:	4b7c      	ldr	r3, [pc, #496]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7b      	ldr	r2, [pc, #492]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e01d      	b.n	800338c <HAL_RCC_OscConfig+0xcc>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0xb4>
 800335a:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a75      	ldr	r2, [pc, #468]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b73      	ldr	r3, [pc, #460]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a72      	ldr	r2, [pc, #456]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0xcc>
 8003374:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 800337a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6b      	ldr	r2, [pc, #428]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd fff0 	bl	8001378 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339c:	f7fd ffec 	bl	8001378 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e21f      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b61      	ldr	r3, [pc, #388]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0xdc>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fd ffdc 	bl	8001378 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fd ffd8 	bl	8001378 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e20b      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	4b57      	ldr	r3, [pc, #348]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x104>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d06f      	beq.n	80034d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033f2:	4b50      	ldr	r3, [pc, #320]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d017      	beq.n	800342e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033fe:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003406:	2b08      	cmp	r3, #8
 8003408:	d105      	bne.n	8003416 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d11c      	bne.n	800345c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b44      	ldr	r3, [pc, #272]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x186>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1d3      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4937      	ldr	r1, [pc, #220]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	e03a      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b34      	ldr	r3, [pc, #208]	; (8003538 <HAL_RCC_OscConfig+0x278>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fd ff85 	bl	8001378 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003472:	f7fd ff81 	bl	8001378 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1b4      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b28      	ldr	r3, [pc, #160]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4925      	ldr	r1, [pc, #148]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_OscConfig+0x278>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fd ff64 	bl	8001378 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fd ff60 	bl	8001378 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e193      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d036      	beq.n	800354c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_RCC_OscConfig+0x27c>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fd ff44 	bl	8001378 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fd ff40 	bl	8001378 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e173      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 8003508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x234>
 8003512:	e01b      	b.n	800354c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_OscConfig+0x27c>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7fd ff2d 	bl	8001378 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	e00e      	b.n	8003540 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003522:	f7fd ff29 	bl	8001378 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d907      	bls.n	8003540 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e15c      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
 8003534:	40023800 	.word	0x40023800
 8003538:	42470000 	.word	0x42470000
 800353c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b8a      	ldr	r3, [pc, #552]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ea      	bne.n	8003522 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8097 	beq.w	8003688 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b83      	ldr	r3, [pc, #524]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	4b7f      	ldr	r3, [pc, #508]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a7e      	ldr	r2, [pc, #504]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b7c      	ldr	r3, [pc, #496]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358a:	4b79      	ldr	r3, [pc, #484]	; (8003770 <HAL_RCC_OscConfig+0x4b0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d118      	bne.n	80035c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x4b0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x4b0>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a2:	f7fd fee9 	bl	8001378 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035aa:	f7fd fee5 	bl	8001378 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e118      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	4b6c      	ldr	r3, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x4b0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x31e>
 80035d0:	4b66      	ldr	r3, [pc, #408]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a65      	ldr	r2, [pc, #404]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	e01c      	b.n	8003618 <HAL_RCC_OscConfig+0x358>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x340>
 80035e6:	4b61      	ldr	r3, [pc, #388]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4a60      	ldr	r2, [pc, #384]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	6713      	str	r3, [r2, #112]	; 0x70
 80035f2:	4b5e      	ldr	r3, [pc, #376]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	4a5d      	ldr	r2, [pc, #372]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6713      	str	r3, [r2, #112]	; 0x70
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0x358>
 8003600:	4b5a      	ldr	r3, [pc, #360]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a59      	ldr	r2, [pc, #356]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	4b57      	ldr	r3, [pc, #348]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a56      	ldr	r2, [pc, #344]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003612:	f023 0304 	bic.w	r3, r3, #4
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d015      	beq.n	800364c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd feaa 	bl	8001378 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd fea6 	bl	8001378 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e0d7      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	4b4b      	ldr	r3, [pc, #300]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ee      	beq.n	8003628 <HAL_RCC_OscConfig+0x368>
 800364a:	e014      	b.n	8003676 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fe94 	bl	8001378 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003652:	e00a      	b.n	800366a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd fe90 	bl	8001378 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0c1      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	4b40      	ldr	r3, [pc, #256]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ee      	bne.n	8003654 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367c:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	4a3a      	ldr	r2, [pc, #232]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80ad 	beq.w	80037ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003692:	4b36      	ldr	r3, [pc, #216]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	d060      	beq.n	8003760 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d145      	bne.n	8003732 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	4b33      	ldr	r3, [pc, #204]	; (8003774 <HAL_RCC_OscConfig+0x4b4>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd fe64 	bl	8001378 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fd fe60 	bl	8001378 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e093      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	491b      	ldr	r1, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x4b4>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fd fe35 	bl	8001378 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003712:	f7fd fe31 	bl	8001378 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e064      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x452>
 8003730:	e05c      	b.n	80037ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_RCC_OscConfig+0x4b4>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fd fe1e 	bl	8001378 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003740:	f7fd fe1a 	bl	8001378 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e04d      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_RCC_OscConfig+0x4ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x480>
 800375e:	e045      	b.n	80037ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e040      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
 800376c:	40023800 	.word	0x40023800
 8003770:	40007000 	.word	0x40007000
 8003774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003778:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <HAL_RCC_OscConfig+0x538>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d030      	beq.n	80037e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d129      	bne.n	80037e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d122      	bne.n	80037e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d119      	bne.n	80037e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	3b01      	subs	r3, #1
 80037c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d10f      	bne.n	80037e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800

080037fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e03f      	b.n	800388e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fba0 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f9cb 	bl	8003bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b08a      	sub	sp, #40	; 0x28
 800389a:	af02      	add	r7, sp, #8
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d17c      	bne.n	80039b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_UART_Transmit+0x2c>
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e075      	b.n	80039b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Transmit+0x3e>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e06e      	b.n	80039b2 <HAL_UART_Transmit+0x11c>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2221      	movs	r2, #33	; 0x21
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ea:	f7fd fd45 	bl	8001378 <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	d108      	bne.n	8003918 <HAL_UART_Transmit+0x82>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	e003      	b.n	8003920 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003928:	e02a      	b.n	8003980 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2200      	movs	r2, #0
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f8e2 	bl	8003afe <UART_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e036      	b.n	80039b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003958:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	3302      	adds	r3, #2
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e007      	b.n	8003972 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	781a      	ldrb	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1cf      	bne.n	800392a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2140      	movs	r1, #64	; 0x40
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f8b2 	bl	8003afe <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e006      	b.n	80039b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e000      	b.n	80039b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b08a      	sub	sp, #40	; 0x28
 80039be:	af02      	add	r7, sp, #8
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	f040 808c 	bne.w	8003af4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Receive+0x2e>
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e084      	b.n	8003af6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Receive+0x40>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e07d      	b.n	8003af6 <HAL_UART_Receive+0x13c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2222      	movs	r2, #34	; 0x22
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fd fcaf 	bl	8001378 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d108      	bne.n	8003a44 <HAL_UART_Receive+0x8a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e003      	b.n	8003a4c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a54:	e043      	b.n	8003ade <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2120      	movs	r1, #32
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f84c 	bl	8003afe <UART_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e042      	b.n	8003af6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e01f      	b.n	8003ad0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d007      	beq.n	8003aaa <HAL_UART_Receive+0xf0>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_UART_Receive+0xfe>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	e008      	b.n	8003aca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3301      	adds	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1b6      	bne.n	8003a56 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b090      	sub	sp, #64	; 0x40
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0e:	e050      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d04c      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b1e:	f7fd fc2b 	bl	8001378 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d241      	bcs.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b4e:	637a      	str	r2, [r7, #52]	; 0x34
 8003b50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e5      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3314      	adds	r3, #20
 8003b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	613b      	str	r3, [r7, #16]
   return(result);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b82:	623a      	str	r2, [r7, #32]
 8003b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	69f9      	ldr	r1, [r7, #28]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e5      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d09f      	beq.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3740      	adds	r7, #64	; 0x40
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b0c0      	sub	sp, #256	; 0x100
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	68d9      	ldr	r1, [r3, #12]
 8003bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	ea40 0301 	orr.w	r3, r0, r1
 8003c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c34:	f021 010c 	bic.w	r1, r1, #12
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c42:	430b      	orrs	r3, r1
 8003c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c56:	6999      	ldr	r1, [r3, #24]
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	ea40 0301 	orr.w	r3, r0, r1
 8003c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b8f      	ldr	r3, [pc, #572]	; (8003ea8 <UART_SetConfig+0x2cc>)
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d005      	beq.n	8003c7c <UART_SetConfig+0xa0>
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b8d      	ldr	r3, [pc, #564]	; (8003eac <UART_SetConfig+0x2d0>)
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d104      	bne.n	8003c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c7c:	f7ff f8dc 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 8003c80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c84:	e003      	b.n	8003c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c86:	f7ff f8c3 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8003c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c98:	f040 810c 	bne.w	8003eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cae:	4622      	mov	r2, r4
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	1891      	adds	r1, r2, r2
 8003cb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cb6:	415b      	adcs	r3, r3
 8003cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	eb12 0801 	adds.w	r8, r2, r1
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	eb43 0901 	adc.w	r9, r3, r1
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cde:	4690      	mov	r8, r2
 8003ce0:	4699      	mov	r9, r3
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	eb18 0303 	adds.w	r3, r8, r3
 8003ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cec:	462b      	mov	r3, r5
 8003cee:	eb49 0303 	adc.w	r3, r9, r3
 8003cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	18db      	adds	r3, r3, r3
 8003d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d10:	4613      	mov	r3, r2
 8003d12:	eb42 0303 	adc.w	r3, r2, r3
 8003d16:	657b      	str	r3, [r7, #84]	; 0x54
 8003d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d20:	f7fc fac6 	bl	80002b0 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4b61      	ldr	r3, [pc, #388]	; (8003eb0 <UART_SetConfig+0x2d4>)
 8003d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	011c      	lsls	r4, r3, #4
 8003d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d44:	4642      	mov	r2, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	1891      	adds	r1, r2, r2
 8003d4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d4c:	415b      	adcs	r3, r3
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d54:	4641      	mov	r1, r8
 8003d56:	eb12 0a01 	adds.w	sl, r2, r1
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d74:	4692      	mov	sl, r2
 8003d76:	469b      	mov	fp, r3
 8003d78:	4643      	mov	r3, r8
 8003d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d82:	464b      	mov	r3, r9
 8003d84:	eb4b 0303 	adc.w	r3, fp, r3
 8003d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003da0:	460b      	mov	r3, r1
 8003da2:	18db      	adds	r3, r3, r3
 8003da4:	643b      	str	r3, [r7, #64]	; 0x40
 8003da6:	4613      	mov	r3, r2
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	647b      	str	r3, [r7, #68]	; 0x44
 8003dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003db6:	f7fc fa7b 	bl	80002b0 <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <UART_SetConfig+0x2d4>)
 8003dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2264      	movs	r2, #100	; 0x64
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	1acb      	subs	r3, r1, r3
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <UART_SetConfig+0x2d4>)
 8003dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003de4:	441c      	add	r4, r3
 8003de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003df0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	1891      	adds	r1, r2, r2
 8003dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e00:	415b      	adcs	r3, r3
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e08:	4641      	mov	r1, r8
 8003e0a:	1851      	adds	r1, r2, r1
 8003e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e0e:	4649      	mov	r1, r9
 8003e10:	414b      	adcs	r3, r1
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e20:	4659      	mov	r1, fp
 8003e22:	00cb      	lsls	r3, r1, #3
 8003e24:	4651      	mov	r1, sl
 8003e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2a:	4651      	mov	r1, sl
 8003e2c:	00ca      	lsls	r2, r1, #3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	4642      	mov	r2, r8
 8003e36:	189b      	adds	r3, r3, r2
 8003e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	460a      	mov	r2, r1
 8003e40:	eb42 0303 	adc.w	r3, r2, r3
 8003e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	18db      	adds	r3, r3, r3
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e62:	4613      	mov	r3, r2
 8003e64:	eb42 0303 	adc.w	r3, r2, r3
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e72:	f7fc fa1d 	bl	80002b0 <__aeabi_uldivmod>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <UART_SetConfig+0x2d4>)
 8003e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	2164      	movs	r1, #100	; 0x64
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	3332      	adds	r3, #50	; 0x32
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <UART_SetConfig+0x2d4>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	f003 0207 	and.w	r2, r3, #7
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4422      	add	r2, r4
 8003ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ea4:	e105      	b.n	80040b2 <UART_SetConfig+0x4d6>
 8003ea6:	bf00      	nop
 8003ea8:	40011000 	.word	0x40011000
 8003eac:	40011400 	.word	0x40011400
 8003eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ec6:	4642      	mov	r2, r8
 8003ec8:	464b      	mov	r3, r9
 8003eca:	1891      	adds	r1, r2, r2
 8003ecc:	6239      	str	r1, [r7, #32]
 8003ece:	415b      	adcs	r3, r3
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	1854      	adds	r4, r2, r1
 8003eda:	4649      	mov	r1, r9
 8003edc:	eb43 0501 	adc.w	r5, r3, r1
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	00eb      	lsls	r3, r5, #3
 8003eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eee:	00e2      	lsls	r2, r4, #3
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	4643      	mov	r3, r8
 8003ef6:	18e3      	adds	r3, r4, r3
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003efc:	464b      	mov	r3, r9
 8003efe:	eb45 0303 	adc.w	r3, r5, r3
 8003f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f22:	4629      	mov	r1, r5
 8003f24:	008b      	lsls	r3, r1, #2
 8003f26:	4621      	mov	r1, r4
 8003f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	008a      	lsls	r2, r1, #2
 8003f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f34:	f7fc f9bc 	bl	80002b0 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4b60      	ldr	r3, [pc, #384]	; (80040c0 <UART_SetConfig+0x4e4>)
 8003f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	011c      	lsls	r4, r3, #4
 8003f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f58:	4642      	mov	r2, r8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	1891      	adds	r1, r2, r2
 8003f5e:	61b9      	str	r1, [r7, #24]
 8003f60:	415b      	adcs	r3, r3
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f68:	4641      	mov	r1, r8
 8003f6a:	1851      	adds	r1, r2, r1
 8003f6c:	6139      	str	r1, [r7, #16]
 8003f6e:	4649      	mov	r1, r9
 8003f70:	414b      	adcs	r3, r1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f80:	4659      	mov	r1, fp
 8003f82:	00cb      	lsls	r3, r1, #3
 8003f84:	4651      	mov	r1, sl
 8003f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	00ca      	lsls	r2, r1, #3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	4642      	mov	r2, r8
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f9c:	464b      	mov	r3, r9
 8003f9e:	460a      	mov	r2, r1
 8003fa0:	eb42 0303 	adc.w	r3, r2, r3
 8003fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	008b      	lsls	r3, r1, #2
 8003fc4:	4641      	mov	r1, r8
 8003fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fca:	4641      	mov	r1, r8
 8003fcc:	008a      	lsls	r2, r1, #2
 8003fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fd2:	f7fc f96d 	bl	80002b0 <__aeabi_uldivmod>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <UART_SetConfig+0x4e4>)
 8003fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	2164      	movs	r1, #100	; 0x64
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	3332      	adds	r3, #50	; 0x32
 8003fee:	4a34      	ldr	r2, [pc, #208]	; (80040c0 <UART_SetConfig+0x4e4>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffa:	441c      	add	r4, r3
 8003ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004000:	2200      	movs	r2, #0
 8004002:	673b      	str	r3, [r7, #112]	; 0x70
 8004004:	677a      	str	r2, [r7, #116]	; 0x74
 8004006:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800400a:	4642      	mov	r2, r8
 800400c:	464b      	mov	r3, r9
 800400e:	1891      	adds	r1, r2, r2
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	415b      	adcs	r3, r3
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800401a:	4641      	mov	r1, r8
 800401c:	1851      	adds	r1, r2, r1
 800401e:	6039      	str	r1, [r7, #0]
 8004020:	4649      	mov	r1, r9
 8004022:	414b      	adcs	r3, r1
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004032:	4659      	mov	r1, fp
 8004034:	00cb      	lsls	r3, r1, #3
 8004036:	4651      	mov	r1, sl
 8004038:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403c:	4651      	mov	r1, sl
 800403e:	00ca      	lsls	r2, r1, #3
 8004040:	4610      	mov	r0, r2
 8004042:	4619      	mov	r1, r3
 8004044:	4603      	mov	r3, r0
 8004046:	4642      	mov	r2, r8
 8004048:	189b      	adds	r3, r3, r2
 800404a:	66bb      	str	r3, [r7, #104]	; 0x68
 800404c:	464b      	mov	r3, r9
 800404e:	460a      	mov	r2, r1
 8004050:	eb42 0303 	adc.w	r3, r2, r3
 8004054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	663b      	str	r3, [r7, #96]	; 0x60
 8004060:	667a      	str	r2, [r7, #100]	; 0x64
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800406e:	4649      	mov	r1, r9
 8004070:	008b      	lsls	r3, r1, #2
 8004072:	4641      	mov	r1, r8
 8004074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004078:	4641      	mov	r1, r8
 800407a:	008a      	lsls	r2, r1, #2
 800407c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004080:	f7fc f916 	bl	80002b0 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <UART_SetConfig+0x4e4>)
 800408a:	fba3 1302 	umull	r1, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2164      	movs	r1, #100	; 0x64
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	3332      	adds	r3, #50	; 0x32
 800409c:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <UART_SetConfig+0x4e4>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4422      	add	r2, r4
 80040b0:	609a      	str	r2, [r3, #8]
}
 80040b2:	bf00      	nop
 80040b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040b8:	46bd      	mov	sp, r7
 80040ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040be:	bf00      	nop
 80040c0:	51eb851f 	.word	0x51eb851f

080040c4 <__errno>:
 80040c4:	4b01      	ldr	r3, [pc, #4]	; (80040cc <__errno+0x8>)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000018 	.word	0x20000018

080040d0 <__libc_init_array>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4d0d      	ldr	r5, [pc, #52]	; (8004108 <__libc_init_array+0x38>)
 80040d4:	4c0d      	ldr	r4, [pc, #52]	; (800410c <__libc_init_array+0x3c>)
 80040d6:	1b64      	subs	r4, r4, r5
 80040d8:	10a4      	asrs	r4, r4, #2
 80040da:	2600      	movs	r6, #0
 80040dc:	42a6      	cmp	r6, r4
 80040de:	d109      	bne.n	80040f4 <__libc_init_array+0x24>
 80040e0:	4d0b      	ldr	r5, [pc, #44]	; (8004110 <__libc_init_array+0x40>)
 80040e2:	4c0c      	ldr	r4, [pc, #48]	; (8004114 <__libc_init_array+0x44>)
 80040e4:	f001 f824 	bl	8005130 <_init>
 80040e8:	1b64      	subs	r4, r4, r5
 80040ea:	10a4      	asrs	r4, r4, #2
 80040ec:	2600      	movs	r6, #0
 80040ee:	42a6      	cmp	r6, r4
 80040f0:	d105      	bne.n	80040fe <__libc_init_array+0x2e>
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f8:	4798      	blx	r3
 80040fa:	3601      	adds	r6, #1
 80040fc:	e7ee      	b.n	80040dc <__libc_init_array+0xc>
 80040fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004102:	4798      	blx	r3
 8004104:	3601      	adds	r6, #1
 8004106:	e7f2      	b.n	80040ee <__libc_init_array+0x1e>
 8004108:	08005328 	.word	0x08005328
 800410c:	08005328 	.word	0x08005328
 8004110:	08005328 	.word	0x08005328
 8004114:	0800532c 	.word	0x0800532c

08004118 <memset>:
 8004118:	4402      	add	r2, r0
 800411a:	4603      	mov	r3, r0
 800411c:	4293      	cmp	r3, r2
 800411e:	d100      	bne.n	8004122 <memset+0xa>
 8004120:	4770      	bx	lr
 8004122:	f803 1b01 	strb.w	r1, [r3], #1
 8004126:	e7f9      	b.n	800411c <memset+0x4>

08004128 <iprintf>:
 8004128:	b40f      	push	{r0, r1, r2, r3}
 800412a:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <iprintf+0x2c>)
 800412c:	b513      	push	{r0, r1, r4, lr}
 800412e:	681c      	ldr	r4, [r3, #0]
 8004130:	b124      	cbz	r4, 800413c <iprintf+0x14>
 8004132:	69a3      	ldr	r3, [r4, #24]
 8004134:	b913      	cbnz	r3, 800413c <iprintf+0x14>
 8004136:	4620      	mov	r0, r4
 8004138:	f000 fa5e 	bl	80045f8 <__sinit>
 800413c:	ab05      	add	r3, sp, #20
 800413e:	9a04      	ldr	r2, [sp, #16]
 8004140:	68a1      	ldr	r1, [r4, #8]
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	4620      	mov	r0, r4
 8004146:	f000 fc67 	bl	8004a18 <_vfiprintf_r>
 800414a:	b002      	add	sp, #8
 800414c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004150:	b004      	add	sp, #16
 8004152:	4770      	bx	lr
 8004154:	20000018 	.word	0x20000018

08004158 <_puts_r>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	460e      	mov	r6, r1
 800415c:	4605      	mov	r5, r0
 800415e:	b118      	cbz	r0, 8004168 <_puts_r+0x10>
 8004160:	6983      	ldr	r3, [r0, #24]
 8004162:	b90b      	cbnz	r3, 8004168 <_puts_r+0x10>
 8004164:	f000 fa48 	bl	80045f8 <__sinit>
 8004168:	69ab      	ldr	r3, [r5, #24]
 800416a:	68ac      	ldr	r4, [r5, #8]
 800416c:	b913      	cbnz	r3, 8004174 <_puts_r+0x1c>
 800416e:	4628      	mov	r0, r5
 8004170:	f000 fa42 	bl	80045f8 <__sinit>
 8004174:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <_puts_r+0xd0>)
 8004176:	429c      	cmp	r4, r3
 8004178:	d120      	bne.n	80041bc <_puts_r+0x64>
 800417a:	686c      	ldr	r4, [r5, #4]
 800417c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800417e:	07db      	lsls	r3, r3, #31
 8004180:	d405      	bmi.n	800418e <_puts_r+0x36>
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	0598      	lsls	r0, r3, #22
 8004186:	d402      	bmi.n	800418e <_puts_r+0x36>
 8004188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800418a:	f000 fad3 	bl	8004734 <__retarget_lock_acquire_recursive>
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	0719      	lsls	r1, r3, #28
 8004192:	d51d      	bpl.n	80041d0 <_puts_r+0x78>
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	b1db      	cbz	r3, 80041d0 <_puts_r+0x78>
 8004198:	3e01      	subs	r6, #1
 800419a:	68a3      	ldr	r3, [r4, #8]
 800419c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60a3      	str	r3, [r4, #8]
 80041a4:	bb39      	cbnz	r1, 80041f6 <_puts_r+0x9e>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da38      	bge.n	800421c <_puts_r+0xc4>
 80041aa:	4622      	mov	r2, r4
 80041ac:	210a      	movs	r1, #10
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f848 	bl	8004244 <__swbuf_r>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d011      	beq.n	80041dc <_puts_r+0x84>
 80041b8:	250a      	movs	r5, #10
 80041ba:	e011      	b.n	80041e0 <_puts_r+0x88>
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <_puts_r+0xd4>)
 80041be:	429c      	cmp	r4, r3
 80041c0:	d101      	bne.n	80041c6 <_puts_r+0x6e>
 80041c2:	68ac      	ldr	r4, [r5, #8]
 80041c4:	e7da      	b.n	800417c <_puts_r+0x24>
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <_puts_r+0xd8>)
 80041c8:	429c      	cmp	r4, r3
 80041ca:	bf08      	it	eq
 80041cc:	68ec      	ldreq	r4, [r5, #12]
 80041ce:	e7d5      	b.n	800417c <_puts_r+0x24>
 80041d0:	4621      	mov	r1, r4
 80041d2:	4628      	mov	r0, r5
 80041d4:	f000 f888 	bl	80042e8 <__swsetup_r>
 80041d8:	2800      	cmp	r0, #0
 80041da:	d0dd      	beq.n	8004198 <_puts_r+0x40>
 80041dc:	f04f 35ff 	mov.w	r5, #4294967295
 80041e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041e2:	07da      	lsls	r2, r3, #31
 80041e4:	d405      	bmi.n	80041f2 <_puts_r+0x9a>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	059b      	lsls	r3, r3, #22
 80041ea:	d402      	bmi.n	80041f2 <_puts_r+0x9a>
 80041ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ee:	f000 faa2 	bl	8004736 <__retarget_lock_release_recursive>
 80041f2:	4628      	mov	r0, r5
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da04      	bge.n	8004204 <_puts_r+0xac>
 80041fa:	69a2      	ldr	r2, [r4, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	dc06      	bgt.n	800420e <_puts_r+0xb6>
 8004200:	290a      	cmp	r1, #10
 8004202:	d004      	beq.n	800420e <_puts_r+0xb6>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	6022      	str	r2, [r4, #0]
 800420a:	7019      	strb	r1, [r3, #0]
 800420c:	e7c5      	b.n	800419a <_puts_r+0x42>
 800420e:	4622      	mov	r2, r4
 8004210:	4628      	mov	r0, r5
 8004212:	f000 f817 	bl	8004244 <__swbuf_r>
 8004216:	3001      	adds	r0, #1
 8004218:	d1bf      	bne.n	800419a <_puts_r+0x42>
 800421a:	e7df      	b.n	80041dc <_puts_r+0x84>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	250a      	movs	r5, #10
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	6022      	str	r2, [r4, #0]
 8004224:	701d      	strb	r5, [r3, #0]
 8004226:	e7db      	b.n	80041e0 <_puts_r+0x88>
 8004228:	080052ac 	.word	0x080052ac
 800422c:	080052cc 	.word	0x080052cc
 8004230:	0800528c 	.word	0x0800528c

08004234 <puts>:
 8004234:	4b02      	ldr	r3, [pc, #8]	; (8004240 <puts+0xc>)
 8004236:	4601      	mov	r1, r0
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	f7ff bf8d 	b.w	8004158 <_puts_r>
 800423e:	bf00      	nop
 8004240:	20000018 	.word	0x20000018

08004244 <__swbuf_r>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	460e      	mov	r6, r1
 8004248:	4614      	mov	r4, r2
 800424a:	4605      	mov	r5, r0
 800424c:	b118      	cbz	r0, 8004256 <__swbuf_r+0x12>
 800424e:	6983      	ldr	r3, [r0, #24]
 8004250:	b90b      	cbnz	r3, 8004256 <__swbuf_r+0x12>
 8004252:	f000 f9d1 	bl	80045f8 <__sinit>
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <__swbuf_r+0x98>)
 8004258:	429c      	cmp	r4, r3
 800425a:	d12b      	bne.n	80042b4 <__swbuf_r+0x70>
 800425c:	686c      	ldr	r4, [r5, #4]
 800425e:	69a3      	ldr	r3, [r4, #24]
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	071a      	lsls	r2, r3, #28
 8004266:	d52f      	bpl.n	80042c8 <__swbuf_r+0x84>
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	b36b      	cbz	r3, 80042c8 <__swbuf_r+0x84>
 800426c:	6923      	ldr	r3, [r4, #16]
 800426e:	6820      	ldr	r0, [r4, #0]
 8004270:	1ac0      	subs	r0, r0, r3
 8004272:	6963      	ldr	r3, [r4, #20]
 8004274:	b2f6      	uxtb	r6, r6
 8004276:	4283      	cmp	r3, r0
 8004278:	4637      	mov	r7, r6
 800427a:	dc04      	bgt.n	8004286 <__swbuf_r+0x42>
 800427c:	4621      	mov	r1, r4
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f926 	bl	80044d0 <_fflush_r>
 8004284:	bb30      	cbnz	r0, 80042d4 <__swbuf_r+0x90>
 8004286:	68a3      	ldr	r3, [r4, #8]
 8004288:	3b01      	subs	r3, #1
 800428a:	60a3      	str	r3, [r4, #8]
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	6022      	str	r2, [r4, #0]
 8004292:	701e      	strb	r6, [r3, #0]
 8004294:	6963      	ldr	r3, [r4, #20]
 8004296:	3001      	adds	r0, #1
 8004298:	4283      	cmp	r3, r0
 800429a:	d004      	beq.n	80042a6 <__swbuf_r+0x62>
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	07db      	lsls	r3, r3, #31
 80042a0:	d506      	bpl.n	80042b0 <__swbuf_r+0x6c>
 80042a2:	2e0a      	cmp	r6, #10
 80042a4:	d104      	bne.n	80042b0 <__swbuf_r+0x6c>
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 f911 	bl	80044d0 <_fflush_r>
 80042ae:	b988      	cbnz	r0, 80042d4 <__swbuf_r+0x90>
 80042b0:	4638      	mov	r0, r7
 80042b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <__swbuf_r+0x9c>)
 80042b6:	429c      	cmp	r4, r3
 80042b8:	d101      	bne.n	80042be <__swbuf_r+0x7a>
 80042ba:	68ac      	ldr	r4, [r5, #8]
 80042bc:	e7cf      	b.n	800425e <__swbuf_r+0x1a>
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <__swbuf_r+0xa0>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	bf08      	it	eq
 80042c4:	68ec      	ldreq	r4, [r5, #12]
 80042c6:	e7ca      	b.n	800425e <__swbuf_r+0x1a>
 80042c8:	4621      	mov	r1, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	f000 f80c 	bl	80042e8 <__swsetup_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d0cb      	beq.n	800426c <__swbuf_r+0x28>
 80042d4:	f04f 37ff 	mov.w	r7, #4294967295
 80042d8:	e7ea      	b.n	80042b0 <__swbuf_r+0x6c>
 80042da:	bf00      	nop
 80042dc:	080052ac 	.word	0x080052ac
 80042e0:	080052cc 	.word	0x080052cc
 80042e4:	0800528c 	.word	0x0800528c

080042e8 <__swsetup_r>:
 80042e8:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <__swsetup_r+0xcc>)
 80042ea:	b570      	push	{r4, r5, r6, lr}
 80042ec:	681d      	ldr	r5, [r3, #0]
 80042ee:	4606      	mov	r6, r0
 80042f0:	460c      	mov	r4, r1
 80042f2:	b125      	cbz	r5, 80042fe <__swsetup_r+0x16>
 80042f4:	69ab      	ldr	r3, [r5, #24]
 80042f6:	b913      	cbnz	r3, 80042fe <__swsetup_r+0x16>
 80042f8:	4628      	mov	r0, r5
 80042fa:	f000 f97d 	bl	80045f8 <__sinit>
 80042fe:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <__swsetup_r+0xd0>)
 8004300:	429c      	cmp	r4, r3
 8004302:	d10f      	bne.n	8004324 <__swsetup_r+0x3c>
 8004304:	686c      	ldr	r4, [r5, #4]
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800430c:	0719      	lsls	r1, r3, #28
 800430e:	d42c      	bmi.n	800436a <__swsetup_r+0x82>
 8004310:	06dd      	lsls	r5, r3, #27
 8004312:	d411      	bmi.n	8004338 <__swsetup_r+0x50>
 8004314:	2309      	movs	r3, #9
 8004316:	6033      	str	r3, [r6, #0]
 8004318:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	f04f 30ff 	mov.w	r0, #4294967295
 8004322:	e03e      	b.n	80043a2 <__swsetup_r+0xba>
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <__swsetup_r+0xd4>)
 8004326:	429c      	cmp	r4, r3
 8004328:	d101      	bne.n	800432e <__swsetup_r+0x46>
 800432a:	68ac      	ldr	r4, [r5, #8]
 800432c:	e7eb      	b.n	8004306 <__swsetup_r+0x1e>
 800432e:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <__swsetup_r+0xd8>)
 8004330:	429c      	cmp	r4, r3
 8004332:	bf08      	it	eq
 8004334:	68ec      	ldreq	r4, [r5, #12]
 8004336:	e7e6      	b.n	8004306 <__swsetup_r+0x1e>
 8004338:	0758      	lsls	r0, r3, #29
 800433a:	d512      	bpl.n	8004362 <__swsetup_r+0x7a>
 800433c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800433e:	b141      	cbz	r1, 8004352 <__swsetup_r+0x6a>
 8004340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004344:	4299      	cmp	r1, r3
 8004346:	d002      	beq.n	800434e <__swsetup_r+0x66>
 8004348:	4630      	mov	r0, r6
 800434a:	f000 fa5b 	bl	8004804 <_free_r>
 800434e:	2300      	movs	r3, #0
 8004350:	6363      	str	r3, [r4, #52]	; 0x34
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	2300      	movs	r3, #0
 800435c:	6063      	str	r3, [r4, #4]
 800435e:	6923      	ldr	r3, [r4, #16]
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	89a3      	ldrh	r3, [r4, #12]
 8004364:	f043 0308 	orr.w	r3, r3, #8
 8004368:	81a3      	strh	r3, [r4, #12]
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	b94b      	cbnz	r3, 8004382 <__swsetup_r+0x9a>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d003      	beq.n	8004382 <__swsetup_r+0x9a>
 800437a:	4621      	mov	r1, r4
 800437c:	4630      	mov	r0, r6
 800437e:	f000 fa01 	bl	8004784 <__smakebuf_r>
 8004382:	89a0      	ldrh	r0, [r4, #12]
 8004384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004388:	f010 0301 	ands.w	r3, r0, #1
 800438c:	d00a      	beq.n	80043a4 <__swsetup_r+0xbc>
 800438e:	2300      	movs	r3, #0
 8004390:	60a3      	str	r3, [r4, #8]
 8004392:	6963      	ldr	r3, [r4, #20]
 8004394:	425b      	negs	r3, r3
 8004396:	61a3      	str	r3, [r4, #24]
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	b943      	cbnz	r3, 80043ae <__swsetup_r+0xc6>
 800439c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043a0:	d1ba      	bne.n	8004318 <__swsetup_r+0x30>
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	0781      	lsls	r1, r0, #30
 80043a6:	bf58      	it	pl
 80043a8:	6963      	ldrpl	r3, [r4, #20]
 80043aa:	60a3      	str	r3, [r4, #8]
 80043ac:	e7f4      	b.n	8004398 <__swsetup_r+0xb0>
 80043ae:	2000      	movs	r0, #0
 80043b0:	e7f7      	b.n	80043a2 <__swsetup_r+0xba>
 80043b2:	bf00      	nop
 80043b4:	20000018 	.word	0x20000018
 80043b8:	080052ac 	.word	0x080052ac
 80043bc:	080052cc 	.word	0x080052cc
 80043c0:	0800528c 	.word	0x0800528c

080043c4 <__sflush_r>:
 80043c4:	898a      	ldrh	r2, [r1, #12]
 80043c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ca:	4605      	mov	r5, r0
 80043cc:	0710      	lsls	r0, r2, #28
 80043ce:	460c      	mov	r4, r1
 80043d0:	d458      	bmi.n	8004484 <__sflush_r+0xc0>
 80043d2:	684b      	ldr	r3, [r1, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	dc05      	bgt.n	80043e4 <__sflush_r+0x20>
 80043d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	dc02      	bgt.n	80043e4 <__sflush_r+0x20>
 80043de:	2000      	movs	r0, #0
 80043e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043e6:	2e00      	cmp	r6, #0
 80043e8:	d0f9      	beq.n	80043de <__sflush_r+0x1a>
 80043ea:	2300      	movs	r3, #0
 80043ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043f0:	682f      	ldr	r7, [r5, #0]
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	d032      	beq.n	800445c <__sflush_r+0x98>
 80043f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	075a      	lsls	r2, r3, #29
 80043fc:	d505      	bpl.n	800440a <__sflush_r+0x46>
 80043fe:	6863      	ldr	r3, [r4, #4]
 8004400:	1ac0      	subs	r0, r0, r3
 8004402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004404:	b10b      	cbz	r3, 800440a <__sflush_r+0x46>
 8004406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004408:	1ac0      	subs	r0, r0, r3
 800440a:	2300      	movs	r3, #0
 800440c:	4602      	mov	r2, r0
 800440e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004410:	6a21      	ldr	r1, [r4, #32]
 8004412:	4628      	mov	r0, r5
 8004414:	47b0      	blx	r6
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	d106      	bne.n	800442a <__sflush_r+0x66>
 800441c:	6829      	ldr	r1, [r5, #0]
 800441e:	291d      	cmp	r1, #29
 8004420:	d82c      	bhi.n	800447c <__sflush_r+0xb8>
 8004422:	4a2a      	ldr	r2, [pc, #168]	; (80044cc <__sflush_r+0x108>)
 8004424:	40ca      	lsrs	r2, r1
 8004426:	07d6      	lsls	r6, r2, #31
 8004428:	d528      	bpl.n	800447c <__sflush_r+0xb8>
 800442a:	2200      	movs	r2, #0
 800442c:	6062      	str	r2, [r4, #4]
 800442e:	04d9      	lsls	r1, r3, #19
 8004430:	6922      	ldr	r2, [r4, #16]
 8004432:	6022      	str	r2, [r4, #0]
 8004434:	d504      	bpl.n	8004440 <__sflush_r+0x7c>
 8004436:	1c42      	adds	r2, r0, #1
 8004438:	d101      	bne.n	800443e <__sflush_r+0x7a>
 800443a:	682b      	ldr	r3, [r5, #0]
 800443c:	b903      	cbnz	r3, 8004440 <__sflush_r+0x7c>
 800443e:	6560      	str	r0, [r4, #84]	; 0x54
 8004440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004442:	602f      	str	r7, [r5, #0]
 8004444:	2900      	cmp	r1, #0
 8004446:	d0ca      	beq.n	80043de <__sflush_r+0x1a>
 8004448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800444c:	4299      	cmp	r1, r3
 800444e:	d002      	beq.n	8004456 <__sflush_r+0x92>
 8004450:	4628      	mov	r0, r5
 8004452:	f000 f9d7 	bl	8004804 <_free_r>
 8004456:	2000      	movs	r0, #0
 8004458:	6360      	str	r0, [r4, #52]	; 0x34
 800445a:	e7c1      	b.n	80043e0 <__sflush_r+0x1c>
 800445c:	6a21      	ldr	r1, [r4, #32]
 800445e:	2301      	movs	r3, #1
 8004460:	4628      	mov	r0, r5
 8004462:	47b0      	blx	r6
 8004464:	1c41      	adds	r1, r0, #1
 8004466:	d1c7      	bne.n	80043f8 <__sflush_r+0x34>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0c4      	beq.n	80043f8 <__sflush_r+0x34>
 800446e:	2b1d      	cmp	r3, #29
 8004470:	d001      	beq.n	8004476 <__sflush_r+0xb2>
 8004472:	2b16      	cmp	r3, #22
 8004474:	d101      	bne.n	800447a <__sflush_r+0xb6>
 8004476:	602f      	str	r7, [r5, #0]
 8004478:	e7b1      	b.n	80043de <__sflush_r+0x1a>
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004480:	81a3      	strh	r3, [r4, #12]
 8004482:	e7ad      	b.n	80043e0 <__sflush_r+0x1c>
 8004484:	690f      	ldr	r7, [r1, #16]
 8004486:	2f00      	cmp	r7, #0
 8004488:	d0a9      	beq.n	80043de <__sflush_r+0x1a>
 800448a:	0793      	lsls	r3, r2, #30
 800448c:	680e      	ldr	r6, [r1, #0]
 800448e:	bf08      	it	eq
 8004490:	694b      	ldreq	r3, [r1, #20]
 8004492:	600f      	str	r7, [r1, #0]
 8004494:	bf18      	it	ne
 8004496:	2300      	movne	r3, #0
 8004498:	eba6 0807 	sub.w	r8, r6, r7
 800449c:	608b      	str	r3, [r1, #8]
 800449e:	f1b8 0f00 	cmp.w	r8, #0
 80044a2:	dd9c      	ble.n	80043de <__sflush_r+0x1a>
 80044a4:	6a21      	ldr	r1, [r4, #32]
 80044a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044a8:	4643      	mov	r3, r8
 80044aa:	463a      	mov	r2, r7
 80044ac:	4628      	mov	r0, r5
 80044ae:	47b0      	blx	r6
 80044b0:	2800      	cmp	r0, #0
 80044b2:	dc06      	bgt.n	80044c2 <__sflush_r+0xfe>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	e78e      	b.n	80043e0 <__sflush_r+0x1c>
 80044c2:	4407      	add	r7, r0
 80044c4:	eba8 0800 	sub.w	r8, r8, r0
 80044c8:	e7e9      	b.n	800449e <__sflush_r+0xda>
 80044ca:	bf00      	nop
 80044cc:	20400001 	.word	0x20400001

080044d0 <_fflush_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	690b      	ldr	r3, [r1, #16]
 80044d4:	4605      	mov	r5, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	b913      	cbnz	r3, 80044e0 <_fflush_r+0x10>
 80044da:	2500      	movs	r5, #0
 80044dc:	4628      	mov	r0, r5
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	b118      	cbz	r0, 80044ea <_fflush_r+0x1a>
 80044e2:	6983      	ldr	r3, [r0, #24]
 80044e4:	b90b      	cbnz	r3, 80044ea <_fflush_r+0x1a>
 80044e6:	f000 f887 	bl	80045f8 <__sinit>
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <_fflush_r+0x6c>)
 80044ec:	429c      	cmp	r4, r3
 80044ee:	d11b      	bne.n	8004528 <_fflush_r+0x58>
 80044f0:	686c      	ldr	r4, [r5, #4]
 80044f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0ef      	beq.n	80044da <_fflush_r+0xa>
 80044fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044fc:	07d0      	lsls	r0, r2, #31
 80044fe:	d404      	bmi.n	800450a <_fflush_r+0x3a>
 8004500:	0599      	lsls	r1, r3, #22
 8004502:	d402      	bmi.n	800450a <_fflush_r+0x3a>
 8004504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004506:	f000 f915 	bl	8004734 <__retarget_lock_acquire_recursive>
 800450a:	4628      	mov	r0, r5
 800450c:	4621      	mov	r1, r4
 800450e:	f7ff ff59 	bl	80043c4 <__sflush_r>
 8004512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004514:	07da      	lsls	r2, r3, #31
 8004516:	4605      	mov	r5, r0
 8004518:	d4e0      	bmi.n	80044dc <_fflush_r+0xc>
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	059b      	lsls	r3, r3, #22
 800451e:	d4dd      	bmi.n	80044dc <_fflush_r+0xc>
 8004520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004522:	f000 f908 	bl	8004736 <__retarget_lock_release_recursive>
 8004526:	e7d9      	b.n	80044dc <_fflush_r+0xc>
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <_fflush_r+0x70>)
 800452a:	429c      	cmp	r4, r3
 800452c:	d101      	bne.n	8004532 <_fflush_r+0x62>
 800452e:	68ac      	ldr	r4, [r5, #8]
 8004530:	e7df      	b.n	80044f2 <_fflush_r+0x22>
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <_fflush_r+0x74>)
 8004534:	429c      	cmp	r4, r3
 8004536:	bf08      	it	eq
 8004538:	68ec      	ldreq	r4, [r5, #12]
 800453a:	e7da      	b.n	80044f2 <_fflush_r+0x22>
 800453c:	080052ac 	.word	0x080052ac
 8004540:	080052cc 	.word	0x080052cc
 8004544:	0800528c 	.word	0x0800528c

08004548 <std>:
 8004548:	2300      	movs	r3, #0
 800454a:	b510      	push	{r4, lr}
 800454c:	4604      	mov	r4, r0
 800454e:	e9c0 3300 	strd	r3, r3, [r0]
 8004552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004556:	6083      	str	r3, [r0, #8]
 8004558:	8181      	strh	r1, [r0, #12]
 800455a:	6643      	str	r3, [r0, #100]	; 0x64
 800455c:	81c2      	strh	r2, [r0, #14]
 800455e:	6183      	str	r3, [r0, #24]
 8004560:	4619      	mov	r1, r3
 8004562:	2208      	movs	r2, #8
 8004564:	305c      	adds	r0, #92	; 0x5c
 8004566:	f7ff fdd7 	bl	8004118 <memset>
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <std+0x38>)
 800456c:	6263      	str	r3, [r4, #36]	; 0x24
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <std+0x3c>)
 8004570:	62a3      	str	r3, [r4, #40]	; 0x28
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <std+0x40>)
 8004574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <std+0x44>)
 8004578:	6224      	str	r4, [r4, #32]
 800457a:	6323      	str	r3, [r4, #48]	; 0x30
 800457c:	bd10      	pop	{r4, pc}
 800457e:	bf00      	nop
 8004580:	08004fc1 	.word	0x08004fc1
 8004584:	08004fe3 	.word	0x08004fe3
 8004588:	0800501b 	.word	0x0800501b
 800458c:	0800503f 	.word	0x0800503f

08004590 <_cleanup_r>:
 8004590:	4901      	ldr	r1, [pc, #4]	; (8004598 <_cleanup_r+0x8>)
 8004592:	f000 b8af 	b.w	80046f4 <_fwalk_reent>
 8004596:	bf00      	nop
 8004598:	080044d1 	.word	0x080044d1

0800459c <__sfmoreglue>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	2268      	movs	r2, #104	; 0x68
 80045a0:	1e4d      	subs	r5, r1, #1
 80045a2:	4355      	muls	r5, r2
 80045a4:	460e      	mov	r6, r1
 80045a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045aa:	f000 f997 	bl	80048dc <_malloc_r>
 80045ae:	4604      	mov	r4, r0
 80045b0:	b140      	cbz	r0, 80045c4 <__sfmoreglue+0x28>
 80045b2:	2100      	movs	r1, #0
 80045b4:	e9c0 1600 	strd	r1, r6, [r0]
 80045b8:	300c      	adds	r0, #12
 80045ba:	60a0      	str	r0, [r4, #8]
 80045bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045c0:	f7ff fdaa 	bl	8004118 <memset>
 80045c4:	4620      	mov	r0, r4
 80045c6:	bd70      	pop	{r4, r5, r6, pc}

080045c8 <__sfp_lock_acquire>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__sfp_lock_acquire+0x8>)
 80045ca:	f000 b8b3 	b.w	8004734 <__retarget_lock_acquire_recursive>
 80045ce:	bf00      	nop
 80045d0:	20000209 	.word	0x20000209

080045d4 <__sfp_lock_release>:
 80045d4:	4801      	ldr	r0, [pc, #4]	; (80045dc <__sfp_lock_release+0x8>)
 80045d6:	f000 b8ae 	b.w	8004736 <__retarget_lock_release_recursive>
 80045da:	bf00      	nop
 80045dc:	20000209 	.word	0x20000209

080045e0 <__sinit_lock_acquire>:
 80045e0:	4801      	ldr	r0, [pc, #4]	; (80045e8 <__sinit_lock_acquire+0x8>)
 80045e2:	f000 b8a7 	b.w	8004734 <__retarget_lock_acquire_recursive>
 80045e6:	bf00      	nop
 80045e8:	2000020a 	.word	0x2000020a

080045ec <__sinit_lock_release>:
 80045ec:	4801      	ldr	r0, [pc, #4]	; (80045f4 <__sinit_lock_release+0x8>)
 80045ee:	f000 b8a2 	b.w	8004736 <__retarget_lock_release_recursive>
 80045f2:	bf00      	nop
 80045f4:	2000020a 	.word	0x2000020a

080045f8 <__sinit>:
 80045f8:	b510      	push	{r4, lr}
 80045fa:	4604      	mov	r4, r0
 80045fc:	f7ff fff0 	bl	80045e0 <__sinit_lock_acquire>
 8004600:	69a3      	ldr	r3, [r4, #24]
 8004602:	b11b      	cbz	r3, 800460c <__sinit+0x14>
 8004604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004608:	f7ff bff0 	b.w	80045ec <__sinit_lock_release>
 800460c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004610:	6523      	str	r3, [r4, #80]	; 0x50
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <__sinit+0x68>)
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <__sinit+0x6c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	62a2      	str	r2, [r4, #40]	; 0x28
 800461a:	42a3      	cmp	r3, r4
 800461c:	bf04      	itt	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	61a3      	streq	r3, [r4, #24]
 8004622:	4620      	mov	r0, r4
 8004624:	f000 f820 	bl	8004668 <__sfp>
 8004628:	6060      	str	r0, [r4, #4]
 800462a:	4620      	mov	r0, r4
 800462c:	f000 f81c 	bl	8004668 <__sfp>
 8004630:	60a0      	str	r0, [r4, #8]
 8004632:	4620      	mov	r0, r4
 8004634:	f000 f818 	bl	8004668 <__sfp>
 8004638:	2200      	movs	r2, #0
 800463a:	60e0      	str	r0, [r4, #12]
 800463c:	2104      	movs	r1, #4
 800463e:	6860      	ldr	r0, [r4, #4]
 8004640:	f7ff ff82 	bl	8004548 <std>
 8004644:	68a0      	ldr	r0, [r4, #8]
 8004646:	2201      	movs	r2, #1
 8004648:	2109      	movs	r1, #9
 800464a:	f7ff ff7d 	bl	8004548 <std>
 800464e:	68e0      	ldr	r0, [r4, #12]
 8004650:	2202      	movs	r2, #2
 8004652:	2112      	movs	r1, #18
 8004654:	f7ff ff78 	bl	8004548 <std>
 8004658:	2301      	movs	r3, #1
 800465a:	61a3      	str	r3, [r4, #24]
 800465c:	e7d2      	b.n	8004604 <__sinit+0xc>
 800465e:	bf00      	nop
 8004660:	08005288 	.word	0x08005288
 8004664:	08004591 	.word	0x08004591

08004668 <__sfp>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	4607      	mov	r7, r0
 800466c:	f7ff ffac 	bl	80045c8 <__sfp_lock_acquire>
 8004670:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <__sfp+0x84>)
 8004672:	681e      	ldr	r6, [r3, #0]
 8004674:	69b3      	ldr	r3, [r6, #24]
 8004676:	b913      	cbnz	r3, 800467e <__sfp+0x16>
 8004678:	4630      	mov	r0, r6
 800467a:	f7ff ffbd 	bl	80045f8 <__sinit>
 800467e:	3648      	adds	r6, #72	; 0x48
 8004680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004684:	3b01      	subs	r3, #1
 8004686:	d503      	bpl.n	8004690 <__sfp+0x28>
 8004688:	6833      	ldr	r3, [r6, #0]
 800468a:	b30b      	cbz	r3, 80046d0 <__sfp+0x68>
 800468c:	6836      	ldr	r6, [r6, #0]
 800468e:	e7f7      	b.n	8004680 <__sfp+0x18>
 8004690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004694:	b9d5      	cbnz	r5, 80046cc <__sfp+0x64>
 8004696:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <__sfp+0x88>)
 8004698:	60e3      	str	r3, [r4, #12]
 800469a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800469e:	6665      	str	r5, [r4, #100]	; 0x64
 80046a0:	f000 f847 	bl	8004732 <__retarget_lock_init_recursive>
 80046a4:	f7ff ff96 	bl	80045d4 <__sfp_lock_release>
 80046a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046b0:	6025      	str	r5, [r4, #0]
 80046b2:	61a5      	str	r5, [r4, #24]
 80046b4:	2208      	movs	r2, #8
 80046b6:	4629      	mov	r1, r5
 80046b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046bc:	f7ff fd2c 	bl	8004118 <memset>
 80046c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046c8:	4620      	mov	r0, r4
 80046ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046cc:	3468      	adds	r4, #104	; 0x68
 80046ce:	e7d9      	b.n	8004684 <__sfp+0x1c>
 80046d0:	2104      	movs	r1, #4
 80046d2:	4638      	mov	r0, r7
 80046d4:	f7ff ff62 	bl	800459c <__sfmoreglue>
 80046d8:	4604      	mov	r4, r0
 80046da:	6030      	str	r0, [r6, #0]
 80046dc:	2800      	cmp	r0, #0
 80046de:	d1d5      	bne.n	800468c <__sfp+0x24>
 80046e0:	f7ff ff78 	bl	80045d4 <__sfp_lock_release>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	e7ee      	b.n	80046c8 <__sfp+0x60>
 80046ea:	bf00      	nop
 80046ec:	08005288 	.word	0x08005288
 80046f0:	ffff0001 	.word	0xffff0001

080046f4 <_fwalk_reent>:
 80046f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f8:	4606      	mov	r6, r0
 80046fa:	4688      	mov	r8, r1
 80046fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004700:	2700      	movs	r7, #0
 8004702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004706:	f1b9 0901 	subs.w	r9, r9, #1
 800470a:	d505      	bpl.n	8004718 <_fwalk_reent+0x24>
 800470c:	6824      	ldr	r4, [r4, #0]
 800470e:	2c00      	cmp	r4, #0
 8004710:	d1f7      	bne.n	8004702 <_fwalk_reent+0xe>
 8004712:	4638      	mov	r0, r7
 8004714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004718:	89ab      	ldrh	r3, [r5, #12]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d907      	bls.n	800472e <_fwalk_reent+0x3a>
 800471e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004722:	3301      	adds	r3, #1
 8004724:	d003      	beq.n	800472e <_fwalk_reent+0x3a>
 8004726:	4629      	mov	r1, r5
 8004728:	4630      	mov	r0, r6
 800472a:	47c0      	blx	r8
 800472c:	4307      	orrs	r7, r0
 800472e:	3568      	adds	r5, #104	; 0x68
 8004730:	e7e9      	b.n	8004706 <_fwalk_reent+0x12>

08004732 <__retarget_lock_init_recursive>:
 8004732:	4770      	bx	lr

08004734 <__retarget_lock_acquire_recursive>:
 8004734:	4770      	bx	lr

08004736 <__retarget_lock_release_recursive>:
 8004736:	4770      	bx	lr

08004738 <__swhatbuf_r>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004740:	2900      	cmp	r1, #0
 8004742:	b096      	sub	sp, #88	; 0x58
 8004744:	4614      	mov	r4, r2
 8004746:	461d      	mov	r5, r3
 8004748:	da08      	bge.n	800475c <__swhatbuf_r+0x24>
 800474a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	602a      	str	r2, [r5, #0]
 8004752:	061a      	lsls	r2, r3, #24
 8004754:	d410      	bmi.n	8004778 <__swhatbuf_r+0x40>
 8004756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475a:	e00e      	b.n	800477a <__swhatbuf_r+0x42>
 800475c:	466a      	mov	r2, sp
 800475e:	f000 fc95 	bl	800508c <_fstat_r>
 8004762:	2800      	cmp	r0, #0
 8004764:	dbf1      	blt.n	800474a <__swhatbuf_r+0x12>
 8004766:	9a01      	ldr	r2, [sp, #4]
 8004768:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800476c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004770:	425a      	negs	r2, r3
 8004772:	415a      	adcs	r2, r3
 8004774:	602a      	str	r2, [r5, #0]
 8004776:	e7ee      	b.n	8004756 <__swhatbuf_r+0x1e>
 8004778:	2340      	movs	r3, #64	; 0x40
 800477a:	2000      	movs	r0, #0
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	b016      	add	sp, #88	; 0x58
 8004780:	bd70      	pop	{r4, r5, r6, pc}
	...

08004784 <__smakebuf_r>:
 8004784:	898b      	ldrh	r3, [r1, #12]
 8004786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004788:	079d      	lsls	r5, r3, #30
 800478a:	4606      	mov	r6, r0
 800478c:	460c      	mov	r4, r1
 800478e:	d507      	bpl.n	80047a0 <__smakebuf_r+0x1c>
 8004790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	2301      	movs	r3, #1
 800479a:	6163      	str	r3, [r4, #20]
 800479c:	b002      	add	sp, #8
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	ab01      	add	r3, sp, #4
 80047a2:	466a      	mov	r2, sp
 80047a4:	f7ff ffc8 	bl	8004738 <__swhatbuf_r>
 80047a8:	9900      	ldr	r1, [sp, #0]
 80047aa:	4605      	mov	r5, r0
 80047ac:	4630      	mov	r0, r6
 80047ae:	f000 f895 	bl	80048dc <_malloc_r>
 80047b2:	b948      	cbnz	r0, 80047c8 <__smakebuf_r+0x44>
 80047b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b8:	059a      	lsls	r2, r3, #22
 80047ba:	d4ef      	bmi.n	800479c <__smakebuf_r+0x18>
 80047bc:	f023 0303 	bic.w	r3, r3, #3
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e7e3      	b.n	8004790 <__smakebuf_r+0xc>
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <__smakebuf_r+0x7c>)
 80047ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	6020      	str	r0, [r4, #0]
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	9b00      	ldr	r3, [sp, #0]
 80047d8:	6163      	str	r3, [r4, #20]
 80047da:	9b01      	ldr	r3, [sp, #4]
 80047dc:	6120      	str	r0, [r4, #16]
 80047de:	b15b      	cbz	r3, 80047f8 <__smakebuf_r+0x74>
 80047e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 fc63 	bl	80050b0 <_isatty_r>
 80047ea:	b128      	cbz	r0, 80047f8 <__smakebuf_r+0x74>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	89a0      	ldrh	r0, [r4, #12]
 80047fa:	4305      	orrs	r5, r0
 80047fc:	81a5      	strh	r5, [r4, #12]
 80047fe:	e7cd      	b.n	800479c <__smakebuf_r+0x18>
 8004800:	08004591 	.word	0x08004591

08004804 <_free_r>:
 8004804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004806:	2900      	cmp	r1, #0
 8004808:	d044      	beq.n	8004894 <_free_r+0x90>
 800480a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800480e:	9001      	str	r0, [sp, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f1a1 0404 	sub.w	r4, r1, #4
 8004816:	bfb8      	it	lt
 8004818:	18e4      	addlt	r4, r4, r3
 800481a:	f000 fc6b 	bl	80050f4 <__malloc_lock>
 800481e:	4a1e      	ldr	r2, [pc, #120]	; (8004898 <_free_r+0x94>)
 8004820:	9801      	ldr	r0, [sp, #4]
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	b933      	cbnz	r3, 8004834 <_free_r+0x30>
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	6014      	str	r4, [r2, #0]
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004830:	f000 bc66 	b.w	8005100 <__malloc_unlock>
 8004834:	42a3      	cmp	r3, r4
 8004836:	d908      	bls.n	800484a <_free_r+0x46>
 8004838:	6825      	ldr	r5, [r4, #0]
 800483a:	1961      	adds	r1, r4, r5
 800483c:	428b      	cmp	r3, r1
 800483e:	bf01      	itttt	eq
 8004840:	6819      	ldreq	r1, [r3, #0]
 8004842:	685b      	ldreq	r3, [r3, #4]
 8004844:	1949      	addeq	r1, r1, r5
 8004846:	6021      	streq	r1, [r4, #0]
 8004848:	e7ed      	b.n	8004826 <_free_r+0x22>
 800484a:	461a      	mov	r2, r3
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b10b      	cbz	r3, 8004854 <_free_r+0x50>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d9fa      	bls.n	800484a <_free_r+0x46>
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	1855      	adds	r5, r2, r1
 8004858:	42a5      	cmp	r5, r4
 800485a:	d10b      	bne.n	8004874 <_free_r+0x70>
 800485c:	6824      	ldr	r4, [r4, #0]
 800485e:	4421      	add	r1, r4
 8004860:	1854      	adds	r4, r2, r1
 8004862:	42a3      	cmp	r3, r4
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	d1e0      	bne.n	800482a <_free_r+0x26>
 8004868:	681c      	ldr	r4, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	6053      	str	r3, [r2, #4]
 800486e:	4421      	add	r1, r4
 8004870:	6011      	str	r1, [r2, #0]
 8004872:	e7da      	b.n	800482a <_free_r+0x26>
 8004874:	d902      	bls.n	800487c <_free_r+0x78>
 8004876:	230c      	movs	r3, #12
 8004878:	6003      	str	r3, [r0, #0]
 800487a:	e7d6      	b.n	800482a <_free_r+0x26>
 800487c:	6825      	ldr	r5, [r4, #0]
 800487e:	1961      	adds	r1, r4, r5
 8004880:	428b      	cmp	r3, r1
 8004882:	bf04      	itt	eq
 8004884:	6819      	ldreq	r1, [r3, #0]
 8004886:	685b      	ldreq	r3, [r3, #4]
 8004888:	6063      	str	r3, [r4, #4]
 800488a:	bf04      	itt	eq
 800488c:	1949      	addeq	r1, r1, r5
 800488e:	6021      	streq	r1, [r4, #0]
 8004890:	6054      	str	r4, [r2, #4]
 8004892:	e7ca      	b.n	800482a <_free_r+0x26>
 8004894:	b003      	add	sp, #12
 8004896:	bd30      	pop	{r4, r5, pc}
 8004898:	2000020c 	.word	0x2000020c

0800489c <sbrk_aligned>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	4e0e      	ldr	r6, [pc, #56]	; (80048d8 <sbrk_aligned+0x3c>)
 80048a0:	460c      	mov	r4, r1
 80048a2:	6831      	ldr	r1, [r6, #0]
 80048a4:	4605      	mov	r5, r0
 80048a6:	b911      	cbnz	r1, 80048ae <sbrk_aligned+0x12>
 80048a8:	f000 fb7a 	bl	8004fa0 <_sbrk_r>
 80048ac:	6030      	str	r0, [r6, #0]
 80048ae:	4621      	mov	r1, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	f000 fb75 	bl	8004fa0 <_sbrk_r>
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	d00a      	beq.n	80048d0 <sbrk_aligned+0x34>
 80048ba:	1cc4      	adds	r4, r0, #3
 80048bc:	f024 0403 	bic.w	r4, r4, #3
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d007      	beq.n	80048d4 <sbrk_aligned+0x38>
 80048c4:	1a21      	subs	r1, r4, r0
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 fb6a 	bl	8004fa0 <_sbrk_r>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d101      	bne.n	80048d4 <sbrk_aligned+0x38>
 80048d0:	f04f 34ff 	mov.w	r4, #4294967295
 80048d4:	4620      	mov	r0, r4
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	20000210 	.word	0x20000210

080048dc <_malloc_r>:
 80048dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e0:	1ccd      	adds	r5, r1, #3
 80048e2:	f025 0503 	bic.w	r5, r5, #3
 80048e6:	3508      	adds	r5, #8
 80048e8:	2d0c      	cmp	r5, #12
 80048ea:	bf38      	it	cc
 80048ec:	250c      	movcc	r5, #12
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	4607      	mov	r7, r0
 80048f2:	db01      	blt.n	80048f8 <_malloc_r+0x1c>
 80048f4:	42a9      	cmp	r1, r5
 80048f6:	d905      	bls.n	8004904 <_malloc_r+0x28>
 80048f8:	230c      	movs	r3, #12
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	2600      	movs	r6, #0
 80048fe:	4630      	mov	r0, r6
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004904:	4e2e      	ldr	r6, [pc, #184]	; (80049c0 <_malloc_r+0xe4>)
 8004906:	f000 fbf5 	bl	80050f4 <__malloc_lock>
 800490a:	6833      	ldr	r3, [r6, #0]
 800490c:	461c      	mov	r4, r3
 800490e:	bb34      	cbnz	r4, 800495e <_malloc_r+0x82>
 8004910:	4629      	mov	r1, r5
 8004912:	4638      	mov	r0, r7
 8004914:	f7ff ffc2 	bl	800489c <sbrk_aligned>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	4604      	mov	r4, r0
 800491c:	d14d      	bne.n	80049ba <_malloc_r+0xde>
 800491e:	6834      	ldr	r4, [r6, #0]
 8004920:	4626      	mov	r6, r4
 8004922:	2e00      	cmp	r6, #0
 8004924:	d140      	bne.n	80049a8 <_malloc_r+0xcc>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	4631      	mov	r1, r6
 800492a:	4638      	mov	r0, r7
 800492c:	eb04 0803 	add.w	r8, r4, r3
 8004930:	f000 fb36 	bl	8004fa0 <_sbrk_r>
 8004934:	4580      	cmp	r8, r0
 8004936:	d13a      	bne.n	80049ae <_malloc_r+0xd2>
 8004938:	6821      	ldr	r1, [r4, #0]
 800493a:	3503      	adds	r5, #3
 800493c:	1a6d      	subs	r5, r5, r1
 800493e:	f025 0503 	bic.w	r5, r5, #3
 8004942:	3508      	adds	r5, #8
 8004944:	2d0c      	cmp	r5, #12
 8004946:	bf38      	it	cc
 8004948:	250c      	movcc	r5, #12
 800494a:	4629      	mov	r1, r5
 800494c:	4638      	mov	r0, r7
 800494e:	f7ff ffa5 	bl	800489c <sbrk_aligned>
 8004952:	3001      	adds	r0, #1
 8004954:	d02b      	beq.n	80049ae <_malloc_r+0xd2>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	442b      	add	r3, r5
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	e00e      	b.n	800497c <_malloc_r+0xa0>
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	1b52      	subs	r2, r2, r5
 8004962:	d41e      	bmi.n	80049a2 <_malloc_r+0xc6>
 8004964:	2a0b      	cmp	r2, #11
 8004966:	d916      	bls.n	8004996 <_malloc_r+0xba>
 8004968:	1961      	adds	r1, r4, r5
 800496a:	42a3      	cmp	r3, r4
 800496c:	6025      	str	r5, [r4, #0]
 800496e:	bf18      	it	ne
 8004970:	6059      	strne	r1, [r3, #4]
 8004972:	6863      	ldr	r3, [r4, #4]
 8004974:	bf08      	it	eq
 8004976:	6031      	streq	r1, [r6, #0]
 8004978:	5162      	str	r2, [r4, r5]
 800497a:	604b      	str	r3, [r1, #4]
 800497c:	4638      	mov	r0, r7
 800497e:	f104 060b 	add.w	r6, r4, #11
 8004982:	f000 fbbd 	bl	8005100 <__malloc_unlock>
 8004986:	f026 0607 	bic.w	r6, r6, #7
 800498a:	1d23      	adds	r3, r4, #4
 800498c:	1af2      	subs	r2, r6, r3
 800498e:	d0b6      	beq.n	80048fe <_malloc_r+0x22>
 8004990:	1b9b      	subs	r3, r3, r6
 8004992:	50a3      	str	r3, [r4, r2]
 8004994:	e7b3      	b.n	80048fe <_malloc_r+0x22>
 8004996:	6862      	ldr	r2, [r4, #4]
 8004998:	42a3      	cmp	r3, r4
 800499a:	bf0c      	ite	eq
 800499c:	6032      	streq	r2, [r6, #0]
 800499e:	605a      	strne	r2, [r3, #4]
 80049a0:	e7ec      	b.n	800497c <_malloc_r+0xa0>
 80049a2:	4623      	mov	r3, r4
 80049a4:	6864      	ldr	r4, [r4, #4]
 80049a6:	e7b2      	b.n	800490e <_malloc_r+0x32>
 80049a8:	4634      	mov	r4, r6
 80049aa:	6876      	ldr	r6, [r6, #4]
 80049ac:	e7b9      	b.n	8004922 <_malloc_r+0x46>
 80049ae:	230c      	movs	r3, #12
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4638      	mov	r0, r7
 80049b4:	f000 fba4 	bl	8005100 <__malloc_unlock>
 80049b8:	e7a1      	b.n	80048fe <_malloc_r+0x22>
 80049ba:	6025      	str	r5, [r4, #0]
 80049bc:	e7de      	b.n	800497c <_malloc_r+0xa0>
 80049be:	bf00      	nop
 80049c0:	2000020c 	.word	0x2000020c

080049c4 <__sfputc_r>:
 80049c4:	6893      	ldr	r3, [r2, #8]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	b410      	push	{r4}
 80049cc:	6093      	str	r3, [r2, #8]
 80049ce:	da08      	bge.n	80049e2 <__sfputc_r+0x1e>
 80049d0:	6994      	ldr	r4, [r2, #24]
 80049d2:	42a3      	cmp	r3, r4
 80049d4:	db01      	blt.n	80049da <__sfputc_r+0x16>
 80049d6:	290a      	cmp	r1, #10
 80049d8:	d103      	bne.n	80049e2 <__sfputc_r+0x1e>
 80049da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049de:	f7ff bc31 	b.w	8004244 <__swbuf_r>
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	1c58      	adds	r0, r3, #1
 80049e6:	6010      	str	r0, [r2, #0]
 80049e8:	7019      	strb	r1, [r3, #0]
 80049ea:	4608      	mov	r0, r1
 80049ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <__sfputs_r>:
 80049f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f4:	4606      	mov	r6, r0
 80049f6:	460f      	mov	r7, r1
 80049f8:	4614      	mov	r4, r2
 80049fa:	18d5      	adds	r5, r2, r3
 80049fc:	42ac      	cmp	r4, r5
 80049fe:	d101      	bne.n	8004a04 <__sfputs_r+0x12>
 8004a00:	2000      	movs	r0, #0
 8004a02:	e007      	b.n	8004a14 <__sfputs_r+0x22>
 8004a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a08:	463a      	mov	r2, r7
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff ffda 	bl	80049c4 <__sfputc_r>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d1f3      	bne.n	80049fc <__sfputs_r+0xa>
 8004a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a18 <_vfiprintf_r>:
 8004a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1c:	460d      	mov	r5, r1
 8004a1e:	b09d      	sub	sp, #116	; 0x74
 8004a20:	4614      	mov	r4, r2
 8004a22:	4698      	mov	r8, r3
 8004a24:	4606      	mov	r6, r0
 8004a26:	b118      	cbz	r0, 8004a30 <_vfiprintf_r+0x18>
 8004a28:	6983      	ldr	r3, [r0, #24]
 8004a2a:	b90b      	cbnz	r3, 8004a30 <_vfiprintf_r+0x18>
 8004a2c:	f7ff fde4 	bl	80045f8 <__sinit>
 8004a30:	4b89      	ldr	r3, [pc, #548]	; (8004c58 <_vfiprintf_r+0x240>)
 8004a32:	429d      	cmp	r5, r3
 8004a34:	d11b      	bne.n	8004a6e <_vfiprintf_r+0x56>
 8004a36:	6875      	ldr	r5, [r6, #4]
 8004a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a3a:	07d9      	lsls	r1, r3, #31
 8004a3c:	d405      	bmi.n	8004a4a <_vfiprintf_r+0x32>
 8004a3e:	89ab      	ldrh	r3, [r5, #12]
 8004a40:	059a      	lsls	r2, r3, #22
 8004a42:	d402      	bmi.n	8004a4a <_vfiprintf_r+0x32>
 8004a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a46:	f7ff fe75 	bl	8004734 <__retarget_lock_acquire_recursive>
 8004a4a:	89ab      	ldrh	r3, [r5, #12]
 8004a4c:	071b      	lsls	r3, r3, #28
 8004a4e:	d501      	bpl.n	8004a54 <_vfiprintf_r+0x3c>
 8004a50:	692b      	ldr	r3, [r5, #16]
 8004a52:	b9eb      	cbnz	r3, 8004a90 <_vfiprintf_r+0x78>
 8004a54:	4629      	mov	r1, r5
 8004a56:	4630      	mov	r0, r6
 8004a58:	f7ff fc46 	bl	80042e8 <__swsetup_r>
 8004a5c:	b1c0      	cbz	r0, 8004a90 <_vfiprintf_r+0x78>
 8004a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a60:	07dc      	lsls	r4, r3, #31
 8004a62:	d50e      	bpl.n	8004a82 <_vfiprintf_r+0x6a>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	b01d      	add	sp, #116	; 0x74
 8004a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6e:	4b7b      	ldr	r3, [pc, #492]	; (8004c5c <_vfiprintf_r+0x244>)
 8004a70:	429d      	cmp	r5, r3
 8004a72:	d101      	bne.n	8004a78 <_vfiprintf_r+0x60>
 8004a74:	68b5      	ldr	r5, [r6, #8]
 8004a76:	e7df      	b.n	8004a38 <_vfiprintf_r+0x20>
 8004a78:	4b79      	ldr	r3, [pc, #484]	; (8004c60 <_vfiprintf_r+0x248>)
 8004a7a:	429d      	cmp	r5, r3
 8004a7c:	bf08      	it	eq
 8004a7e:	68f5      	ldreq	r5, [r6, #12]
 8004a80:	e7da      	b.n	8004a38 <_vfiprintf_r+0x20>
 8004a82:	89ab      	ldrh	r3, [r5, #12]
 8004a84:	0598      	lsls	r0, r3, #22
 8004a86:	d4ed      	bmi.n	8004a64 <_vfiprintf_r+0x4c>
 8004a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a8a:	f7ff fe54 	bl	8004736 <__retarget_lock_release_recursive>
 8004a8e:	e7e9      	b.n	8004a64 <_vfiprintf_r+0x4c>
 8004a90:	2300      	movs	r3, #0
 8004a92:	9309      	str	r3, [sp, #36]	; 0x24
 8004a94:	2320      	movs	r3, #32
 8004a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a9e:	2330      	movs	r3, #48	; 0x30
 8004aa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c64 <_vfiprintf_r+0x24c>
 8004aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aa8:	f04f 0901 	mov.w	r9, #1
 8004aac:	4623      	mov	r3, r4
 8004aae:	469a      	mov	sl, r3
 8004ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ab4:	b10a      	cbz	r2, 8004aba <_vfiprintf_r+0xa2>
 8004ab6:	2a25      	cmp	r2, #37	; 0x25
 8004ab8:	d1f9      	bne.n	8004aae <_vfiprintf_r+0x96>
 8004aba:	ebba 0b04 	subs.w	fp, sl, r4
 8004abe:	d00b      	beq.n	8004ad8 <_vfiprintf_r+0xc0>
 8004ac0:	465b      	mov	r3, fp
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f7ff ff93 	bl	80049f2 <__sfputs_r>
 8004acc:	3001      	adds	r0, #1
 8004ace:	f000 80aa 	beq.w	8004c26 <_vfiprintf_r+0x20e>
 8004ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ad4:	445a      	add	r2, fp
 8004ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a2 	beq.w	8004c26 <_vfiprintf_r+0x20e>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aec:	f10a 0a01 	add.w	sl, sl, #1
 8004af0:	9304      	str	r3, [sp, #16]
 8004af2:	9307      	str	r3, [sp, #28]
 8004af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004af8:	931a      	str	r3, [sp, #104]	; 0x68
 8004afa:	4654      	mov	r4, sl
 8004afc:	2205      	movs	r2, #5
 8004afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b02:	4858      	ldr	r0, [pc, #352]	; (8004c64 <_vfiprintf_r+0x24c>)
 8004b04:	f7fb fb84 	bl	8000210 <memchr>
 8004b08:	9a04      	ldr	r2, [sp, #16]
 8004b0a:	b9d8      	cbnz	r0, 8004b44 <_vfiprintf_r+0x12c>
 8004b0c:	06d1      	lsls	r1, r2, #27
 8004b0e:	bf44      	itt	mi
 8004b10:	2320      	movmi	r3, #32
 8004b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b16:	0713      	lsls	r3, r2, #28
 8004b18:	bf44      	itt	mi
 8004b1a:	232b      	movmi	r3, #43	; 0x2b
 8004b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b20:	f89a 3000 	ldrb.w	r3, [sl]
 8004b24:	2b2a      	cmp	r3, #42	; 0x2a
 8004b26:	d015      	beq.n	8004b54 <_vfiprintf_r+0x13c>
 8004b28:	9a07      	ldr	r2, [sp, #28]
 8004b2a:	4654      	mov	r4, sl
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f04f 0c0a 	mov.w	ip, #10
 8004b32:	4621      	mov	r1, r4
 8004b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b38:	3b30      	subs	r3, #48	; 0x30
 8004b3a:	2b09      	cmp	r3, #9
 8004b3c:	d94e      	bls.n	8004bdc <_vfiprintf_r+0x1c4>
 8004b3e:	b1b0      	cbz	r0, 8004b6e <_vfiprintf_r+0x156>
 8004b40:	9207      	str	r2, [sp, #28]
 8004b42:	e014      	b.n	8004b6e <_vfiprintf_r+0x156>
 8004b44:	eba0 0308 	sub.w	r3, r0, r8
 8004b48:	fa09 f303 	lsl.w	r3, r9, r3
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	46a2      	mov	sl, r4
 8004b52:	e7d2      	b.n	8004afa <_vfiprintf_r+0xe2>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	1d19      	adds	r1, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	9103      	str	r1, [sp, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bfbb      	ittet	lt
 8004b60:	425b      	neglt	r3, r3
 8004b62:	f042 0202 	orrlt.w	r2, r2, #2
 8004b66:	9307      	strge	r3, [sp, #28]
 8004b68:	9307      	strlt	r3, [sp, #28]
 8004b6a:	bfb8      	it	lt
 8004b6c:	9204      	strlt	r2, [sp, #16]
 8004b6e:	7823      	ldrb	r3, [r4, #0]
 8004b70:	2b2e      	cmp	r3, #46	; 0x2e
 8004b72:	d10c      	bne.n	8004b8e <_vfiprintf_r+0x176>
 8004b74:	7863      	ldrb	r3, [r4, #1]
 8004b76:	2b2a      	cmp	r3, #42	; 0x2a
 8004b78:	d135      	bne.n	8004be6 <_vfiprintf_r+0x1ce>
 8004b7a:	9b03      	ldr	r3, [sp, #12]
 8004b7c:	1d1a      	adds	r2, r3, #4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	9203      	str	r2, [sp, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bfb8      	it	lt
 8004b86:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b8a:	3402      	adds	r4, #2
 8004b8c:	9305      	str	r3, [sp, #20]
 8004b8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c74 <_vfiprintf_r+0x25c>
 8004b92:	7821      	ldrb	r1, [r4, #0]
 8004b94:	2203      	movs	r2, #3
 8004b96:	4650      	mov	r0, sl
 8004b98:	f7fb fb3a 	bl	8000210 <memchr>
 8004b9c:	b140      	cbz	r0, 8004bb0 <_vfiprintf_r+0x198>
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	eba0 000a 	sub.w	r0, r0, sl
 8004ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8004ba8:	9b04      	ldr	r3, [sp, #16]
 8004baa:	4303      	orrs	r3, r0
 8004bac:	3401      	adds	r4, #1
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb4:	482c      	ldr	r0, [pc, #176]	; (8004c68 <_vfiprintf_r+0x250>)
 8004bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bba:	2206      	movs	r2, #6
 8004bbc:	f7fb fb28 	bl	8000210 <memchr>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d03f      	beq.n	8004c44 <_vfiprintf_r+0x22c>
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <_vfiprintf_r+0x254>)
 8004bc6:	bb1b      	cbnz	r3, 8004c10 <_vfiprintf_r+0x1f8>
 8004bc8:	9b03      	ldr	r3, [sp, #12]
 8004bca:	3307      	adds	r3, #7
 8004bcc:	f023 0307 	bic.w	r3, r3, #7
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	9303      	str	r3, [sp, #12]
 8004bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd6:	443b      	add	r3, r7
 8004bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bda:	e767      	b.n	8004aac <_vfiprintf_r+0x94>
 8004bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004be0:	460c      	mov	r4, r1
 8004be2:	2001      	movs	r0, #1
 8004be4:	e7a5      	b.n	8004b32 <_vfiprintf_r+0x11a>
 8004be6:	2300      	movs	r3, #0
 8004be8:	3401      	adds	r4, #1
 8004bea:	9305      	str	r3, [sp, #20]
 8004bec:	4619      	mov	r1, r3
 8004bee:	f04f 0c0a 	mov.w	ip, #10
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bf8:	3a30      	subs	r2, #48	; 0x30
 8004bfa:	2a09      	cmp	r2, #9
 8004bfc:	d903      	bls.n	8004c06 <_vfiprintf_r+0x1ee>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0c5      	beq.n	8004b8e <_vfiprintf_r+0x176>
 8004c02:	9105      	str	r1, [sp, #20]
 8004c04:	e7c3      	b.n	8004b8e <_vfiprintf_r+0x176>
 8004c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e7f0      	b.n	8004bf2 <_vfiprintf_r+0x1da>
 8004c10:	ab03      	add	r3, sp, #12
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	462a      	mov	r2, r5
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <_vfiprintf_r+0x258>)
 8004c18:	a904      	add	r1, sp, #16
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f3af 8000 	nop.w
 8004c20:	4607      	mov	r7, r0
 8004c22:	1c78      	adds	r0, r7, #1
 8004c24:	d1d6      	bne.n	8004bd4 <_vfiprintf_r+0x1bc>
 8004c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c28:	07d9      	lsls	r1, r3, #31
 8004c2a:	d405      	bmi.n	8004c38 <_vfiprintf_r+0x220>
 8004c2c:	89ab      	ldrh	r3, [r5, #12]
 8004c2e:	059a      	lsls	r2, r3, #22
 8004c30:	d402      	bmi.n	8004c38 <_vfiprintf_r+0x220>
 8004c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c34:	f7ff fd7f 	bl	8004736 <__retarget_lock_release_recursive>
 8004c38:	89ab      	ldrh	r3, [r5, #12]
 8004c3a:	065b      	lsls	r3, r3, #25
 8004c3c:	f53f af12 	bmi.w	8004a64 <_vfiprintf_r+0x4c>
 8004c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c42:	e711      	b.n	8004a68 <_vfiprintf_r+0x50>
 8004c44:	ab03      	add	r3, sp, #12
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <_vfiprintf_r+0x258>)
 8004c4c:	a904      	add	r1, sp, #16
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 f880 	bl	8004d54 <_printf_i>
 8004c54:	e7e4      	b.n	8004c20 <_vfiprintf_r+0x208>
 8004c56:	bf00      	nop
 8004c58:	080052ac 	.word	0x080052ac
 8004c5c:	080052cc 	.word	0x080052cc
 8004c60:	0800528c 	.word	0x0800528c
 8004c64:	080052ec 	.word	0x080052ec
 8004c68:	080052f6 	.word	0x080052f6
 8004c6c:	00000000 	.word	0x00000000
 8004c70:	080049f3 	.word	0x080049f3
 8004c74:	080052f2 	.word	0x080052f2

08004c78 <_printf_common>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	4699      	mov	r9, r3
 8004c80:	688a      	ldr	r2, [r1, #8]
 8004c82:	690b      	ldr	r3, [r1, #16]
 8004c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bfb8      	it	lt
 8004c8c:	4613      	movlt	r3, r2
 8004c8e:	6033      	str	r3, [r6, #0]
 8004c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c94:	4607      	mov	r7, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	b10a      	cbz	r2, 8004c9e <_printf_common+0x26>
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	6033      	str	r3, [r6, #0]
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	0699      	lsls	r1, r3, #26
 8004ca2:	bf42      	ittt	mi
 8004ca4:	6833      	ldrmi	r3, [r6, #0]
 8004ca6:	3302      	addmi	r3, #2
 8004ca8:	6033      	strmi	r3, [r6, #0]
 8004caa:	6825      	ldr	r5, [r4, #0]
 8004cac:	f015 0506 	ands.w	r5, r5, #6
 8004cb0:	d106      	bne.n	8004cc0 <_printf_common+0x48>
 8004cb2:	f104 0a19 	add.w	sl, r4, #25
 8004cb6:	68e3      	ldr	r3, [r4, #12]
 8004cb8:	6832      	ldr	r2, [r6, #0]
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	42ab      	cmp	r3, r5
 8004cbe:	dc26      	bgt.n	8004d0e <_printf_common+0x96>
 8004cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cc4:	1e13      	subs	r3, r2, #0
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	bf18      	it	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	0692      	lsls	r2, r2, #26
 8004cce:	d42b      	bmi.n	8004d28 <_printf_common+0xb0>
 8004cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	47c0      	blx	r8
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d01e      	beq.n	8004d1c <_printf_common+0xa4>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	68e5      	ldr	r5, [r4, #12]
 8004ce2:	6832      	ldr	r2, [r6, #0]
 8004ce4:	f003 0306 	and.w	r3, r3, #6
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	bf08      	it	eq
 8004cec:	1aad      	subeq	r5, r5, r2
 8004cee:	68a3      	ldr	r3, [r4, #8]
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	bf0c      	ite	eq
 8004cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf8:	2500      	movne	r5, #0
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	bfc4      	itt	gt
 8004cfe:	1a9b      	subgt	r3, r3, r2
 8004d00:	18ed      	addgt	r5, r5, r3
 8004d02:	2600      	movs	r6, #0
 8004d04:	341a      	adds	r4, #26
 8004d06:	42b5      	cmp	r5, r6
 8004d08:	d11a      	bne.n	8004d40 <_printf_common+0xc8>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e008      	b.n	8004d20 <_printf_common+0xa8>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4652      	mov	r2, sl
 8004d12:	4649      	mov	r1, r9
 8004d14:	4638      	mov	r0, r7
 8004d16:	47c0      	blx	r8
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d103      	bne.n	8004d24 <_printf_common+0xac>
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d24:	3501      	adds	r5, #1
 8004d26:	e7c6      	b.n	8004cb6 <_printf_common+0x3e>
 8004d28:	18e1      	adds	r1, r4, r3
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	2030      	movs	r0, #48	; 0x30
 8004d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d32:	4422      	add	r2, r4
 8004d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	e7c7      	b.n	8004cd0 <_printf_common+0x58>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4622      	mov	r2, r4
 8004d44:	4649      	mov	r1, r9
 8004d46:	4638      	mov	r0, r7
 8004d48:	47c0      	blx	r8
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d0e6      	beq.n	8004d1c <_printf_common+0xa4>
 8004d4e:	3601      	adds	r6, #1
 8004d50:	e7d9      	b.n	8004d06 <_printf_common+0x8e>
	...

08004d54 <_printf_i>:
 8004d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d58:	7e0f      	ldrb	r7, [r1, #24]
 8004d5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d5c:	2f78      	cmp	r7, #120	; 0x78
 8004d5e:	4691      	mov	r9, r2
 8004d60:	4680      	mov	r8, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	469a      	mov	sl, r3
 8004d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d6a:	d807      	bhi.n	8004d7c <_printf_i+0x28>
 8004d6c:	2f62      	cmp	r7, #98	; 0x62
 8004d6e:	d80a      	bhi.n	8004d86 <_printf_i+0x32>
 8004d70:	2f00      	cmp	r7, #0
 8004d72:	f000 80d8 	beq.w	8004f26 <_printf_i+0x1d2>
 8004d76:	2f58      	cmp	r7, #88	; 0x58
 8004d78:	f000 80a3 	beq.w	8004ec2 <_printf_i+0x16e>
 8004d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d84:	e03a      	b.n	8004dfc <_printf_i+0xa8>
 8004d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d8a:	2b15      	cmp	r3, #21
 8004d8c:	d8f6      	bhi.n	8004d7c <_printf_i+0x28>
 8004d8e:	a101      	add	r1, pc, #4	; (adr r1, 8004d94 <_printf_i+0x40>)
 8004d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d94:	08004ded 	.word	0x08004ded
 8004d98:	08004e01 	.word	0x08004e01
 8004d9c:	08004d7d 	.word	0x08004d7d
 8004da0:	08004d7d 	.word	0x08004d7d
 8004da4:	08004d7d 	.word	0x08004d7d
 8004da8:	08004d7d 	.word	0x08004d7d
 8004dac:	08004e01 	.word	0x08004e01
 8004db0:	08004d7d 	.word	0x08004d7d
 8004db4:	08004d7d 	.word	0x08004d7d
 8004db8:	08004d7d 	.word	0x08004d7d
 8004dbc:	08004d7d 	.word	0x08004d7d
 8004dc0:	08004f0d 	.word	0x08004f0d
 8004dc4:	08004e31 	.word	0x08004e31
 8004dc8:	08004eef 	.word	0x08004eef
 8004dcc:	08004d7d 	.word	0x08004d7d
 8004dd0:	08004d7d 	.word	0x08004d7d
 8004dd4:	08004f2f 	.word	0x08004f2f
 8004dd8:	08004d7d 	.word	0x08004d7d
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004d7d 	.word	0x08004d7d
 8004de4:	08004d7d 	.word	0x08004d7d
 8004de8:	08004ef7 	.word	0x08004ef7
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	602a      	str	r2, [r5, #0]
 8004df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0a3      	b.n	8004f48 <_printf_i+0x1f4>
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	6829      	ldr	r1, [r5, #0]
 8004e04:	0606      	lsls	r6, r0, #24
 8004e06:	f101 0304 	add.w	r3, r1, #4
 8004e0a:	d50a      	bpl.n	8004e22 <_printf_i+0xce>
 8004e0c:	680e      	ldr	r6, [r1, #0]
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	2e00      	cmp	r6, #0
 8004e12:	da03      	bge.n	8004e1c <_printf_i+0xc8>
 8004e14:	232d      	movs	r3, #45	; 0x2d
 8004e16:	4276      	negs	r6, r6
 8004e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e1c:	485e      	ldr	r0, [pc, #376]	; (8004f98 <_printf_i+0x244>)
 8004e1e:	230a      	movs	r3, #10
 8004e20:	e019      	b.n	8004e56 <_printf_i+0x102>
 8004e22:	680e      	ldr	r6, [r1, #0]
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e2a:	bf18      	it	ne
 8004e2c:	b236      	sxthne	r6, r6
 8004e2e:	e7ef      	b.n	8004e10 <_printf_i+0xbc>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	1d19      	adds	r1, r3, #4
 8004e36:	6029      	str	r1, [r5, #0]
 8004e38:	0601      	lsls	r1, r0, #24
 8004e3a:	d501      	bpl.n	8004e40 <_printf_i+0xec>
 8004e3c:	681e      	ldr	r6, [r3, #0]
 8004e3e:	e002      	b.n	8004e46 <_printf_i+0xf2>
 8004e40:	0646      	lsls	r6, r0, #25
 8004e42:	d5fb      	bpl.n	8004e3c <_printf_i+0xe8>
 8004e44:	881e      	ldrh	r6, [r3, #0]
 8004e46:	4854      	ldr	r0, [pc, #336]	; (8004f98 <_printf_i+0x244>)
 8004e48:	2f6f      	cmp	r7, #111	; 0x6f
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2308      	moveq	r3, #8
 8004e4e:	230a      	movne	r3, #10
 8004e50:	2100      	movs	r1, #0
 8004e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e56:	6865      	ldr	r5, [r4, #4]
 8004e58:	60a5      	str	r5, [r4, #8]
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	bfa2      	ittt	ge
 8004e5e:	6821      	ldrge	r1, [r4, #0]
 8004e60:	f021 0104 	bicge.w	r1, r1, #4
 8004e64:	6021      	strge	r1, [r4, #0]
 8004e66:	b90e      	cbnz	r6, 8004e6c <_printf_i+0x118>
 8004e68:	2d00      	cmp	r5, #0
 8004e6a:	d04d      	beq.n	8004f08 <_printf_i+0x1b4>
 8004e6c:	4615      	mov	r5, r2
 8004e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e72:	fb03 6711 	mls	r7, r3, r1, r6
 8004e76:	5dc7      	ldrb	r7, [r0, r7]
 8004e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e7c:	4637      	mov	r7, r6
 8004e7e:	42bb      	cmp	r3, r7
 8004e80:	460e      	mov	r6, r1
 8004e82:	d9f4      	bls.n	8004e6e <_printf_i+0x11a>
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d10b      	bne.n	8004ea0 <_printf_i+0x14c>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	07de      	lsls	r6, r3, #31
 8004e8c:	d508      	bpl.n	8004ea0 <_printf_i+0x14c>
 8004e8e:	6923      	ldr	r3, [r4, #16]
 8004e90:	6861      	ldr	r1, [r4, #4]
 8004e92:	4299      	cmp	r1, r3
 8004e94:	bfde      	ittt	le
 8004e96:	2330      	movle	r3, #48	; 0x30
 8004e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ea0:	1b52      	subs	r2, r2, r5
 8004ea2:	6122      	str	r2, [r4, #16]
 8004ea4:	f8cd a000 	str.w	sl, [sp]
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	aa03      	add	r2, sp, #12
 8004eac:	4621      	mov	r1, r4
 8004eae:	4640      	mov	r0, r8
 8004eb0:	f7ff fee2 	bl	8004c78 <_printf_common>
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d14c      	bne.n	8004f52 <_printf_i+0x1fe>
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	b004      	add	sp, #16
 8004ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec2:	4835      	ldr	r0, [pc, #212]	; (8004f98 <_printf_i+0x244>)
 8004ec4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ec8:	6829      	ldr	r1, [r5, #0]
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ed0:	6029      	str	r1, [r5, #0]
 8004ed2:	061d      	lsls	r5, r3, #24
 8004ed4:	d514      	bpl.n	8004f00 <_printf_i+0x1ac>
 8004ed6:	07df      	lsls	r7, r3, #31
 8004ed8:	bf44      	itt	mi
 8004eda:	f043 0320 	orrmi.w	r3, r3, #32
 8004ede:	6023      	strmi	r3, [r4, #0]
 8004ee0:	b91e      	cbnz	r6, 8004eea <_printf_i+0x196>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	f023 0320 	bic.w	r3, r3, #32
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	2310      	movs	r3, #16
 8004eec:	e7b0      	b.n	8004e50 <_printf_i+0xfc>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	f043 0320 	orr.w	r3, r3, #32
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	2378      	movs	r3, #120	; 0x78
 8004ef8:	4828      	ldr	r0, [pc, #160]	; (8004f9c <_printf_i+0x248>)
 8004efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004efe:	e7e3      	b.n	8004ec8 <_printf_i+0x174>
 8004f00:	0659      	lsls	r1, r3, #25
 8004f02:	bf48      	it	mi
 8004f04:	b2b6      	uxthmi	r6, r6
 8004f06:	e7e6      	b.n	8004ed6 <_printf_i+0x182>
 8004f08:	4615      	mov	r5, r2
 8004f0a:	e7bb      	b.n	8004e84 <_printf_i+0x130>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	6826      	ldr	r6, [r4, #0]
 8004f10:	6961      	ldr	r1, [r4, #20]
 8004f12:	1d18      	adds	r0, r3, #4
 8004f14:	6028      	str	r0, [r5, #0]
 8004f16:	0635      	lsls	r5, r6, #24
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	d501      	bpl.n	8004f20 <_printf_i+0x1cc>
 8004f1c:	6019      	str	r1, [r3, #0]
 8004f1e:	e002      	b.n	8004f26 <_printf_i+0x1d2>
 8004f20:	0670      	lsls	r0, r6, #25
 8004f22:	d5fb      	bpl.n	8004f1c <_printf_i+0x1c8>
 8004f24:	8019      	strh	r1, [r3, #0]
 8004f26:	2300      	movs	r3, #0
 8004f28:	6123      	str	r3, [r4, #16]
 8004f2a:	4615      	mov	r5, r2
 8004f2c:	e7ba      	b.n	8004ea4 <_printf_i+0x150>
 8004f2e:	682b      	ldr	r3, [r5, #0]
 8004f30:	1d1a      	adds	r2, r3, #4
 8004f32:	602a      	str	r2, [r5, #0]
 8004f34:	681d      	ldr	r5, [r3, #0]
 8004f36:	6862      	ldr	r2, [r4, #4]
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f7fb f968 	bl	8000210 <memchr>
 8004f40:	b108      	cbz	r0, 8004f46 <_printf_i+0x1f2>
 8004f42:	1b40      	subs	r0, r0, r5
 8004f44:	6060      	str	r0, [r4, #4]
 8004f46:	6863      	ldr	r3, [r4, #4]
 8004f48:	6123      	str	r3, [r4, #16]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f50:	e7a8      	b.n	8004ea4 <_printf_i+0x150>
 8004f52:	6923      	ldr	r3, [r4, #16]
 8004f54:	462a      	mov	r2, r5
 8004f56:	4649      	mov	r1, r9
 8004f58:	4640      	mov	r0, r8
 8004f5a:	47d0      	blx	sl
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d0ab      	beq.n	8004eb8 <_printf_i+0x164>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	079b      	lsls	r3, r3, #30
 8004f64:	d413      	bmi.n	8004f8e <_printf_i+0x23a>
 8004f66:	68e0      	ldr	r0, [r4, #12]
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	4298      	cmp	r0, r3
 8004f6c:	bfb8      	it	lt
 8004f6e:	4618      	movlt	r0, r3
 8004f70:	e7a4      	b.n	8004ebc <_printf_i+0x168>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4632      	mov	r2, r6
 8004f76:	4649      	mov	r1, r9
 8004f78:	4640      	mov	r0, r8
 8004f7a:	47d0      	blx	sl
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d09b      	beq.n	8004eb8 <_printf_i+0x164>
 8004f80:	3501      	adds	r5, #1
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	9903      	ldr	r1, [sp, #12]
 8004f86:	1a5b      	subs	r3, r3, r1
 8004f88:	42ab      	cmp	r3, r5
 8004f8a:	dcf2      	bgt.n	8004f72 <_printf_i+0x21e>
 8004f8c:	e7eb      	b.n	8004f66 <_printf_i+0x212>
 8004f8e:	2500      	movs	r5, #0
 8004f90:	f104 0619 	add.w	r6, r4, #25
 8004f94:	e7f5      	b.n	8004f82 <_printf_i+0x22e>
 8004f96:	bf00      	nop
 8004f98:	080052fd 	.word	0x080052fd
 8004f9c:	0800530e 	.word	0x0800530e

08004fa0 <_sbrk_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d06      	ldr	r5, [pc, #24]	; (8004fbc <_sbrk_r+0x1c>)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	f7fc f90c 	bl	80011c8 <_sbrk>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_sbrk_r+0x1a>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_sbrk_r+0x1a>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	20000214 	.word	0x20000214

08004fc0 <__sread>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc8:	f000 f8a0 	bl	800510c <_read_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	bfab      	itete	ge
 8004fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd4:	181b      	addge	r3, r3, r0
 8004fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fda:	bfac      	ite	ge
 8004fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fde:	81a3      	strhlt	r3, [r4, #12]
 8004fe0:	bd10      	pop	{r4, pc}

08004fe2 <__swrite>:
 8004fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe6:	461f      	mov	r7, r3
 8004fe8:	898b      	ldrh	r3, [r1, #12]
 8004fea:	05db      	lsls	r3, r3, #23
 8004fec:	4605      	mov	r5, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	d505      	bpl.n	8005000 <__swrite+0x1e>
 8004ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f000 f868 	bl	80050d0 <_lseek_r>
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	4632      	mov	r2, r6
 800500e:	463b      	mov	r3, r7
 8005010:	4628      	mov	r0, r5
 8005012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005016:	f000 b817 	b.w	8005048 <_write_r>

0800501a <__sseek>:
 800501a:	b510      	push	{r4, lr}
 800501c:	460c      	mov	r4, r1
 800501e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005022:	f000 f855 	bl	80050d0 <_lseek_r>
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	bf15      	itete	ne
 800502c:	6560      	strne	r0, [r4, #84]	; 0x54
 800502e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005036:	81a3      	strheq	r3, [r4, #12]
 8005038:	bf18      	it	ne
 800503a:	81a3      	strhne	r3, [r4, #12]
 800503c:	bd10      	pop	{r4, pc}

0800503e <__sclose>:
 800503e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005042:	f000 b813 	b.w	800506c <_close_r>
	...

08005048 <_write_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d07      	ldr	r5, [pc, #28]	; (8005068 <_write_r+0x20>)
 800504c:	4604      	mov	r4, r0
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	2200      	movs	r2, #0
 8005054:	602a      	str	r2, [r5, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fc f865 	bl	8001126 <_write>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_write_r+0x1e>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_write_r+0x1e>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000214 	.word	0x20000214

0800506c <_close_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4d06      	ldr	r5, [pc, #24]	; (8005088 <_close_r+0x1c>)
 8005070:	2300      	movs	r3, #0
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	602b      	str	r3, [r5, #0]
 8005078:	f7fc f871 	bl	800115e <_close>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d102      	bne.n	8005086 <_close_r+0x1a>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	b103      	cbz	r3, 8005086 <_close_r+0x1a>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	20000214 	.word	0x20000214

0800508c <_fstat_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4d07      	ldr	r5, [pc, #28]	; (80050ac <_fstat_r+0x20>)
 8005090:	2300      	movs	r3, #0
 8005092:	4604      	mov	r4, r0
 8005094:	4608      	mov	r0, r1
 8005096:	4611      	mov	r1, r2
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	f7fc f86c 	bl	8001176 <_fstat>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	d102      	bne.n	80050a8 <_fstat_r+0x1c>
 80050a2:	682b      	ldr	r3, [r5, #0]
 80050a4:	b103      	cbz	r3, 80050a8 <_fstat_r+0x1c>
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	bd38      	pop	{r3, r4, r5, pc}
 80050aa:	bf00      	nop
 80050ac:	20000214 	.word	0x20000214

080050b0 <_isatty_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d06      	ldr	r5, [pc, #24]	; (80050cc <_isatty_r+0x1c>)
 80050b4:	2300      	movs	r3, #0
 80050b6:	4604      	mov	r4, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	602b      	str	r3, [r5, #0]
 80050bc:	f7fc f86b 	bl	8001196 <_isatty>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d102      	bne.n	80050ca <_isatty_r+0x1a>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b103      	cbz	r3, 80050ca <_isatty_r+0x1a>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	20000214 	.word	0x20000214

080050d0 <_lseek_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4d07      	ldr	r5, [pc, #28]	; (80050f0 <_lseek_r+0x20>)
 80050d4:	4604      	mov	r4, r0
 80050d6:	4608      	mov	r0, r1
 80050d8:	4611      	mov	r1, r2
 80050da:	2200      	movs	r2, #0
 80050dc:	602a      	str	r2, [r5, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	f7fc f864 	bl	80011ac <_lseek>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_lseek_r+0x1e>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_lseek_r+0x1e>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20000214 	.word	0x20000214

080050f4 <__malloc_lock>:
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <__malloc_lock+0x8>)
 80050f6:	f7ff bb1d 	b.w	8004734 <__retarget_lock_acquire_recursive>
 80050fa:	bf00      	nop
 80050fc:	20000208 	.word	0x20000208

08005100 <__malloc_unlock>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__malloc_unlock+0x8>)
 8005102:	f7ff bb18 	b.w	8004736 <__retarget_lock_release_recursive>
 8005106:	bf00      	nop
 8005108:	20000208 	.word	0x20000208

0800510c <_read_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4d07      	ldr	r5, [pc, #28]	; (800512c <_read_r+0x20>)
 8005110:	4604      	mov	r4, r0
 8005112:	4608      	mov	r0, r1
 8005114:	4611      	mov	r1, r2
 8005116:	2200      	movs	r2, #0
 8005118:	602a      	str	r2, [r5, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	f7fb ffe6 	bl	80010ec <_read>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_read_r+0x1e>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_read_r+0x1e>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	20000214 	.word	0x20000214

08005130 <_init>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr

0800513c <_fini>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr
