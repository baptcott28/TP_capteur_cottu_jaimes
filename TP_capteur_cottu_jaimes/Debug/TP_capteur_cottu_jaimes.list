
TP_capteur_cottu_jaimes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000297c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b58  08002b58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b60  08002b60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08002b74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002b74  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7af  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a10  00000000  00000000  0002c7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002eca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ac4  00000000  00000000  0002f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbb3  00000000  00000000  00031184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd269  00000000  00000000  0003ed37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bfa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb0  00000000  00000000  0010bff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b28 	.word	0x08002b28

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002b28 	.word	0x08002b28

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fbc8 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f840 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f996 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f96a 	bl	80007f0 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 800051c:	f000 f8dc 	bl	80006d8 <MX_CAN2_Init>
  MX_I2C1_Init();
 8000520:	f000 f90e 	bl	8000740 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000524:	f000 f93a 	bl	800079c <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000528:	f000 f8a2 	bl	8000670 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*BMP_get_ID();
	BMP_send_Configuration();*/

	//can header init
	pHeader.StdId=STD_ID;
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <main+0x7c>)
 800052e:	2261      	movs	r2, #97	; 0x61
 8000530:	601a      	str	r2, [r3, #0]
	pHeader.IDE=CAN_ID_STD;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <main+0x7c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
	pHeader.RTR=CAN_RTR_DATA;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <main+0x7c>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
	pHeader.DLC=MOTOR_MODE_AUTO;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <main+0x7c>)
 8000540:	2202      	movs	r2, #2
 8000542:	611a      	str	r2, [r3, #16]
	pHeader.TransmitGlobalTime=DISABLE;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <main+0x7c>)
 8000546:	2200      	movs	r2, #0
 8000548:	751a      	strb	r2, [r3, #20]

	//fill data
	*(aData)=ANGLE_90;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <main+0x80>)
 800054c:	225a      	movs	r2, #90	; 0x5a
 800054e:	701a      	strb	r2, [r3, #0]
	*(aData+1)=ANGLE_POSITIVE;
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <main+0x80>)
 8000552:	2200      	movs	r2, #0
 8000554:	705a      	strb	r2, [r3, #1]

	HAL_CAN_Start(&hcan1);
 8000556:	480d      	ldr	r0, [pc, #52]	; (800058c <main+0x84>)
 8000558:	f000 fd33 	bl	8000fc2 <HAL_CAN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, pTxMailbox);
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <main+0x88>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <main+0x80>)
 8000562:	4908      	ldr	r1, [pc, #32]	; (8000584 <main+0x7c>)
 8000564:	4809      	ldr	r0, [pc, #36]	; (800058c <main+0x84>)
 8000566:	f000 fd70 	bl	800104a <HAL_CAN_AddTxMessage>
		*(aData+1)=1-(*(aData+1));
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <main+0x80>)
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	f1c3 0301 	rsb	r3, r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <main+0x80>)
 8000576:	705a      	strb	r2, [r3, #1]
		HAL_Delay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f000 fc02 	bl	8000d84 <HAL_Delay>
		HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, pTxMailbox);
 8000580:	e7ec      	b.n	800055c <main+0x54>
 8000582:	bf00      	nop
 8000584:	20000158 	.word	0x20000158
 8000588:	20000154 	.word	0x20000154
 800058c:	20000028 	.word	0x20000028
 8000590:	20000170 	.word	0x20000170

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	; 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fab8 	bl	8002b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <SystemClock_Config+0xd4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a29      	ldr	r2, [pc, #164]	; (8000668 <SystemClock_Config+0xd4>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <SystemClock_Config+0xd4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <SystemClock_Config+0xd8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e0:	4a22      	ldr	r2, [pc, #136]	; (800066c <SystemClock_Config+0xd8>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <SystemClock_Config+0xd8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000608:	2310      	movs	r3, #16
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000610:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fcf4 	bl	8002010 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062e:	f000 f93f 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2102      	movs	r1, #2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f994 	bl	800197c <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065a:	f000 f929 	bl	80008b0 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_CAN1_Init+0x60>)
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <MX_CAN1_Init+0x64>)
 8000678:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 28;
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_CAN1_Init+0x60>)
 800067c:	221c      	movs	r2, #28
 800067e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_CAN1_Init+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_CAN1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_CAN1_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_CAN1_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_CAN1_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_CAN1_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_CAN1_Init+0x60>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_CAN1_Init+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_CAN1_Init+0x60>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CAN1_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_CAN1_Init+0x60>)
 80006be:	f000 fb85 	bl	8000dcc <HAL_CAN_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006c8:	f000 f8f2 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000028 	.word	0x20000028
 80006d4:	40006400 	.word	0x40006400

080006d8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_CAN2_Init+0x60>)
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_CAN2_Init+0x64>)
 80006e0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_CAN2_Init+0x60>)
 80006e4:	2210      	movs	r2, #16
 80006e6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_CAN2_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_CAN2_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_CAN2_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_CAN2_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_CAN2_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_CAN2_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_CAN2_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_CAN2_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_CAN2_Init+0x60>)
 800071a:	2200      	movs	r2, #0
 800071c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_CAN2_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_CAN2_Init+0x60>)
 8000726:	f000 fb51 	bl	8000dcc <HAL_CAN_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 f8be 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000050 	.word	0x20000050
 800073c:	40006800 	.word	0x40006800

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f000 ffb9 	bl	80016f4 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 f892 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000078 	.word	0x20000078
 8000794:	40005400 	.word	0x40005400
 8000798:	000186a0 	.word	0x000186a0

0800079c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART1_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007d4:	f001 feba 	bl	800254c <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f867 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000cc 	.word	0x200000cc
 80007ec:	40011000 	.word	0x40011000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART2_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000828:	f001 fe90 	bl	800254c <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f83d 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000110 	.word	0x20000110
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_GPIO_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <MX_GPIO_Init+0x68>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_GPIO_Init+0x68>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_GPIO_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <MX_GPIO_Init+0x68>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_GPIO_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_GPIO_Init+0x68>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <MX_GPIO_Init+0x68>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_GPIO_Init+0x68>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008fa:	2007      	movs	r0, #7
 80008fc:	f000 fd32 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a42      	ldr	r2, [pc, #264]	; (8000a34 <HAL_CAN_MspInit+0x128>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d136      	bne.n	800099c <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <HAL_CAN_MspInit+0x12c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	4a40      	ldr	r2, [pc, #256]	; (8000a38 <HAL_CAN_MspInit+0x12c>)
 8000936:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000938:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <HAL_CAN_MspInit+0x12c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d10d      	bne.n	800095c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a3c      	ldr	r2, [pc, #240]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 800094a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	4a35      	ldr	r2, [pc, #212]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6313      	str	r3, [r2, #48]	; 0x30
 800096c:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000978:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800098a:	2309      	movs	r3, #9
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	482a      	ldr	r0, [pc, #168]	; (8000a40 <HAL_CAN_MspInit+0x134>)
 8000996:	f000 fd19 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800099a:	e047      	b.n	8000a2c <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <HAL_CAN_MspInit+0x138>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d142      	bne.n	8000a2c <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 80009b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <HAL_CAN_MspInit+0x12c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <HAL_CAN_MspInit+0x12c>)
 80009ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_CAN_MspInit+0x12c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d10d      	bne.n	80009f0 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 80009de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_CAN_MspInit+0x130>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000a1c:	2309      	movs	r3, #9
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4808      	ldr	r0, [pc, #32]	; (8000a48 <HAL_CAN_MspInit+0x13c>)
 8000a28:	f000 fcd0 	bl	80013cc <HAL_GPIO_Init>
}
 8000a2c:	bf00      	nop
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40006400 	.word	0x40006400
 8000a38:	20000174 	.word	0x20000174
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40006800 	.word	0x40006800
 8000a48:	40020400 	.word	0x40020400

08000a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_I2C_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12c      	bne.n	8000ac8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a90:	2312      	movs	r3, #18
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <HAL_I2C_MspInit+0x8c>)
 8000aa8:	f000 fc90 	bl	80013cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a32      	ldr	r2, [pc, #200]	; (8000bc4 <HAL_UART_MspInit+0xe8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12d      	bne.n	8000b5a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	481e      	ldr	r0, [pc, #120]	; (8000bcc <HAL_UART_MspInit+0xf0>)
 8000b54:	f000 fc3a 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b58:	e030      	b.n	8000bbc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <HAL_UART_MspInit+0xf4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d12b      	bne.n	8000bbc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_UART_MspInit+0xec>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bac:	2307      	movs	r3, #7
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_MspInit+0xf0>)
 8000bb8:	f000 fc08 	bl	80013cc <HAL_GPIO_Init>
}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40004400 	.word	0x40004400

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f890 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x12>
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1a>)
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1e>)
 8000c56:	2300      	movs	r3, #0
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:
 8000c5a:	58d4      	ldr	r4, [r2, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:
 8000c60:	18c4      	adds	r4, r0, r3
 8000c62:	428c      	cmp	r4, r1
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x22>)
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopFillZerobss+0x26>)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:
 8000c72:	42a2      	cmp	r2, r4
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>
 8000c76:	f7ff ffd7 	bl	8000c28 <SystemInit>
 8000c7a:	f001 ff29 	bl	8002ad0 <__libc_init_array>
 8000c7e:	f7ff fc43 	bl	8000508 <main>
 8000c82:	4770      	bx	lr
 8000c84:	20020000 	.word	0x20020000
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	2000000c 	.word	0x2000000c
 8000c90:	08002b68 	.word	0x08002b68
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	2000017c 	.word	0x2000017c

08000c9c <ADC_IRQHandler>:
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 fb4b 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fdf2 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fb55 	bl	80013b2 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 fb2b 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000178 	.word	0x20000178

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000178 	.word	0x20000178

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e0ed      	b.n	8000fba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fd8e 	bl	800090c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0201 	orr.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e00:	f7ff ffb4 	bl	8000d6c <HAL_GetTick>
 8000e04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e06:	e012      	b.n	8000e2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e08:	f7ff ffb0 	bl	8000d6c <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	d90b      	bls.n	8000e2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2205      	movs	r2, #5
 8000e26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0c5      	b.n	8000fba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0e5      	beq.n	8000e08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0202 	bic.w	r2, r2, #2
 8000e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e4c:	f7ff ff8e 	bl	8000d6c <HAL_GetTick>
 8000e50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e52:	e012      	b.n	8000e7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e54:	f7ff ff8a 	bl	8000d6c <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b0a      	cmp	r3, #10
 8000e60:	d90b      	bls.n	8000e7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2205      	movs	r2, #5
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e09f      	b.n	8000fba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e5      	bne.n	8000e54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7e1b      	ldrb	r3, [r3, #24]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d108      	bne.n	8000ea2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7e5b      	ldrb	r3, [r3, #25]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d108      	bne.n	8000ecc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e007      	b.n	8000edc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7e9b      	ldrb	r3, [r3, #26]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d108      	bne.n	8000ef6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0220 	orr.w	r2, r2, #32
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e007      	b.n	8000f06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0220 	bic.w	r2, r2, #32
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7edb      	ldrb	r3, [r3, #27]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d108      	bne.n	8000f20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0210 	bic.w	r2, r2, #16
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e007      	b.n	8000f30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0210 	orr.w	r2, r2, #16
 8000f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7f1b      	ldrb	r3, [r3, #28]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d108      	bne.n	8000f4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0208 	orr.w	r2, r2, #8
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e007      	b.n	8000f5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0208 	bic.w	r2, r2, #8
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7f5b      	ldrb	r3, [r3, #29]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d108      	bne.n	8000f74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0204 	orr.w	r2, r2, #4
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e007      	b.n	8000f84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0204 	bic.w	r2, r2, #4
 8000f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	ea42 0103 	orr.w	r1, r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d12e      	bne.n	8001034 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0201 	bic.w	r2, r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fee:	f7ff febd 	bl	8000d6c <HAL_GetTick>
 8000ff2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ff4:	e012      	b.n	800101c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ff6:	f7ff feb9 	bl	8000d6c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b0a      	cmp	r3, #10
 8001002:	d90b      	bls.n	800101c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2205      	movs	r2, #5
 8001014:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e012      	b.n	8001042 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1e5      	bne.n	8000ff6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	e006      	b.n	8001042 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
  }
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800104a:	b480      	push	{r7}
 800104c:	b089      	sub	sp, #36	; 0x24
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800105e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001068:	7ffb      	ldrb	r3, [r7, #31]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d003      	beq.n	8001076 <HAL_CAN_AddTxMessage+0x2c>
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	2b02      	cmp	r3, #2
 8001072:	f040 80b8 	bne.w	80011e6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10a      	bne.n	8001096 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001086:	2b00      	cmp	r3, #0
 8001088:	d105      	bne.n	8001096 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80a0 	beq.w	80011d6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	0e1b      	lsrs	r3, r3, #24
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d907      	bls.n	80010b6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e09e      	b.n	80011f4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10d      	bne.n	80010e4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010d2:	68f9      	ldr	r1, [r7, #12]
 80010d4:	6809      	ldr	r1, [r1, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3318      	adds	r3, #24
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	440b      	add	r3, r1
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e00f      	b.n	8001104 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010f8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3318      	adds	r3, #24
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	440b      	add	r3, r1
 8001102:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6819      	ldr	r1, [r3, #0]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3318      	adds	r3, #24
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	440b      	add	r3, r1
 8001114:	3304      	adds	r3, #4
 8001116:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	7d1b      	ldrb	r3, [r3, #20]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d111      	bne.n	8001144 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3318      	adds	r3, #24
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4413      	add	r3, r2
 800112c:	3304      	adds	r3, #4
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	6811      	ldr	r1, [r2, #0]
 8001134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3318      	adds	r3, #24
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	440b      	add	r3, r1
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3307      	adds	r3, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	061a      	lsls	r2, r3, #24
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3306      	adds	r3, #6
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	041b      	lsls	r3, r3, #16
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3305      	adds	r3, #5
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	4313      	orrs	r3, r2
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	3204      	adds	r2, #4
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	4610      	mov	r0, r2
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	6811      	ldr	r1, [r2, #0]
 800116c:	ea43 0200 	orr.w	r2, r3, r0
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	440b      	add	r3, r1
 8001176:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800117a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3303      	adds	r3, #3
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	061a      	lsls	r2, r3, #24
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3302      	adds	r3, #2
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	4313      	orrs	r3, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	7812      	ldrb	r2, [r2, #0]
 800119c:	4610      	mov	r0, r2
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	6811      	ldr	r1, [r2, #0]
 80011a2:	ea43 0200 	orr.w	r2, r3, r0
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	440b      	add	r3, r1
 80011ac:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3318      	adds	r3, #24
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4413      	add	r3, r2
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	6811      	ldr	r1, [r2, #0]
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3318      	adds	r3, #24
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	440b      	add	r3, r1
 80011d0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e00e      	b.n	80011f4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e006      	b.n	80011f4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
  }
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3724      	adds	r7, #36	; 0x24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff47 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff5c 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffb0 	bl	8001320 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e165      	b.n	80016b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8154 	bne.w	80016ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80ae 	beq.w	80016ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a5c      	ldr	r2, [pc, #368]	; (80016cc <HAL_GPIO_Init+0x300>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <HAL_GPIO_Init+0x308>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d025      	beq.n	80015e6 <HAL_GPIO_Init+0x21a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4e      	ldr	r2, [pc, #312]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01f      	beq.n	80015e2 <HAL_GPIO_Init+0x216>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <HAL_GPIO_Init+0x310>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x212>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <HAL_GPIO_Init+0x314>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <HAL_GPIO_Init+0x318>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x20a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <HAL_GPIO_Init+0x31c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x206>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a49      	ldr	r2, [pc, #292]	; (80016ec <HAL_GPIO_Init+0x320>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x202>
 80015ca:	2306      	movs	r3, #6
 80015cc:	e00c      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015ce:	2307      	movs	r3, #7
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_GPIO_Init+0x304>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a31      	ldr	r2, [pc, #196]	; (80016f0 <HAL_GPIO_Init+0x324>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_GPIO_Init+0x324>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_GPIO_Init+0x324>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f ae96 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40021400 	.word	0x40021400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e12b      	b.n	800195e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff f996 	bl	8000a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001758:	f000 fa02 	bl	8001b60 <HAL_RCC_GetPCLK1Freq>
 800175c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a81      	ldr	r2, [pc, #516]	; (8001968 <HAL_I2C_Init+0x274>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d807      	bhi.n	8001778 <HAL_I2C_Init+0x84>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4a80      	ldr	r2, [pc, #512]	; (800196c <HAL_I2C_Init+0x278>)
 800176c:	4293      	cmp	r3, r2
 800176e:	bf94      	ite	ls
 8001770:	2301      	movls	r3, #1
 8001772:	2300      	movhi	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e006      	b.n	8001786 <HAL_I2C_Init+0x92>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a7d      	ldr	r2, [pc, #500]	; (8001970 <HAL_I2C_Init+0x27c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	bf94      	ite	ls
 8001780:	2301      	movls	r3, #1
 8001782:	2300      	movhi	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0e7      	b.n	800195e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4a78      	ldr	r2, [pc, #480]	; (8001974 <HAL_I2C_Init+0x280>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a6a      	ldr	r2, [pc, #424]	; (8001968 <HAL_I2C_Init+0x274>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d802      	bhi.n	80017c8 <HAL_I2C_Init+0xd4>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3301      	adds	r3, #1
 80017c6:	e009      	b.n	80017dc <HAL_I2C_Init+0xe8>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	4a69      	ldr	r2, [pc, #420]	; (8001978 <HAL_I2C_Init+0x284>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	3301      	adds	r3, #1
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	495c      	ldr	r1, [pc, #368]	; (8001968 <HAL_I2C_Init+0x274>)
 80017f8:	428b      	cmp	r3, r1
 80017fa:	d819      	bhi.n	8001830 <HAL_I2C_Init+0x13c>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1e59      	subs	r1, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fbb1 f3f3 	udiv	r3, r1, r3
 800180a:	1c59      	adds	r1, r3, #1
 800180c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001810:	400b      	ands	r3, r1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <HAL_I2C_Init+0x138>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1e59      	subs	r1, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fbb1 f3f3 	udiv	r3, r1, r3
 8001824:	3301      	adds	r3, #1
 8001826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182a:	e051      	b.n	80018d0 <HAL_I2C_Init+0x1dc>
 800182c:	2304      	movs	r3, #4
 800182e:	e04f      	b.n	80018d0 <HAL_I2C_Init+0x1dc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <HAL_I2C_Init+0x168>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	fbb0 f3f3 	udiv	r3, r0, r3
 800184a:	3301      	adds	r3, #1
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e012      	b.n	8001882 <HAL_I2C_Init+0x18e>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	0099      	lsls	r1, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001872:	3301      	adds	r3, #1
 8001874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Init+0x196>
 8001886:	2301      	movs	r3, #1
 8001888:	e022      	b.n	80018d0 <HAL_I2C_Init+0x1dc>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10e      	bne.n	80018b0 <HAL_I2C_Init+0x1bc>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1e58      	subs	r0, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	440b      	add	r3, r1
 80018a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ae:	e00f      	b.n	80018d0 <HAL_I2C_Init+0x1dc>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	0099      	lsls	r1, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6911      	ldr	r1, [r2, #16]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	000186a0 	.word	0x000186a0
 800196c:	001e847f 	.word	0x001e847f
 8001970:	003d08ff 	.word	0x003d08ff
 8001974:	431bde83 	.word	0x431bde83
 8001978:	10624dd3 	.word	0x10624dd3

0800197c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0cc      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d90c      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0b8      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	494d      	ldr	r1, [pc, #308]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d044      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d119      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e07f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e067      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f023 0203 	bic.w	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4934      	ldr	r1, [pc, #208]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a6c:	f7ff f97e 	bl	8000d6c <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f7ff f97a 	bl	8000d6c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e04f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 020c 	and.w	r2, r3, #12
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d1eb      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d20c      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e032      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4916      	ldr	r1, [pc, #88]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	490e      	ldr	r1, [pc, #56]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b02:	f000 f855 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	490a      	ldr	r1, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	5ccb      	ldrb	r3, [r1, r3]
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f8de 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08002b40 	.word	0x08002b40
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000000 	.word	0x20000000

08001b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b64:	f7ff fff0 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4903      	ldr	r1, [pc, #12]	; (8001b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08002b50 	.word	0x08002b50

08001b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b8c:	f7ff ffdc 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0b5b      	lsrs	r3, r3, #13
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4903      	ldr	r1, [pc, #12]	; (8001bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	08002b50 	.word	0x08002b50

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb4:	b0ae      	sub	sp, #184	; 0xb8
 8001bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd6:	4bcb      	ldr	r3, [pc, #812]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	f200 8206 	bhi.w	8001ff0 <HAL_RCC_GetSysClockFreq+0x440>
 8001be4:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <HAL_RCC_GetSysClockFreq+0x3c>)
 8001be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bea:	bf00      	nop
 8001bec:	08001c21 	.word	0x08001c21
 8001bf0:	08001ff1 	.word	0x08001ff1
 8001bf4:	08001ff1 	.word	0x08001ff1
 8001bf8:	08001ff1 	.word	0x08001ff1
 8001bfc:	08001c29 	.word	0x08001c29
 8001c00:	08001ff1 	.word	0x08001ff1
 8001c04:	08001ff1 	.word	0x08001ff1
 8001c08:	08001ff1 	.word	0x08001ff1
 8001c0c:	08001c31 	.word	0x08001c31
 8001c10:	08001ff1 	.word	0x08001ff1
 8001c14:	08001ff1 	.word	0x08001ff1
 8001c18:	08001ff1 	.word	0x08001ff1
 8001c1c:	08001e21 	.word	0x08001e21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c20:	4bb9      	ldr	r3, [pc, #740]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001c26:	e1e7      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c28:	4bb8      	ldr	r3, [pc, #736]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c2e:	e1e3      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c30:	4bb4      	ldr	r3, [pc, #720]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3c:	4bb1      	ldr	r3, [pc, #708]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d071      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c48:	4bae      	ldr	r3, [pc, #696]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c6e:	4622      	mov	r2, r4
 8001c70:	462b      	mov	r3, r5
 8001c72:	f04f 0000 	mov.w	r0, #0
 8001c76:	f04f 0100 	mov.w	r1, #0
 8001c7a:	0159      	lsls	r1, r3, #5
 8001c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c80:	0150      	lsls	r0, r2, #5
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4621      	mov	r1, r4
 8001c88:	1a51      	subs	r1, r2, r1
 8001c8a:	6439      	str	r1, [r7, #64]	; 0x40
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ca0:	4649      	mov	r1, r9
 8001ca2:	018b      	lsls	r3, r1, #6
 8001ca4:	4641      	mov	r1, r8
 8001ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001caa:	4641      	mov	r1, r8
 8001cac:	018a      	lsls	r2, r1, #6
 8001cae:	4641      	mov	r1, r8
 8001cb0:	1a51      	subs	r1, r2, r1
 8001cb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001cc8:	4649      	mov	r1, r9
 8001cca:	00cb      	lsls	r3, r1, #3
 8001ccc:	4641      	mov	r1, r8
 8001cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cd2:	4641      	mov	r1, r8
 8001cd4:	00ca      	lsls	r2, r1, #3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4622      	mov	r2, r4
 8001cde:	189b      	adds	r3, r3, r2
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ce2:	462b      	mov	r3, r5
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	eb42 0303 	adc.w	r3, r2, r3
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	024b      	lsls	r3, r1, #9
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d02:	4621      	mov	r1, r4
 8001d04:	024a      	lsls	r2, r1, #9
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d1c:	f7fe fa72 	bl	8000204 <__aeabi_uldivmod>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4613      	mov	r3, r2
 8001d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d2a:	e067      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2c:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	2200      	movs	r2, #0
 8001d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d38:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d44:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d46:	2300      	movs	r3, #0
 8001d48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001d4e:	4622      	mov	r2, r4
 8001d50:	462b      	mov	r3, r5
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	0159      	lsls	r1, r3, #5
 8001d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d60:	0150      	lsls	r0, r2, #5
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4621      	mov	r1, r4
 8001d68:	1a51      	subs	r1, r2, r1
 8001d6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001d80:	4649      	mov	r1, r9
 8001d82:	018b      	lsls	r3, r1, #6
 8001d84:	4641      	mov	r1, r8
 8001d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d8a:	4641      	mov	r1, r8
 8001d8c:	018a      	lsls	r2, r1, #6
 8001d8e:	4641      	mov	r1, r8
 8001d90:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d94:	4649      	mov	r1, r9
 8001d96:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001da6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dae:	4692      	mov	sl, r2
 8001db0:	469b      	mov	fp, r3
 8001db2:	4623      	mov	r3, r4
 8001db4:	eb1a 0303 	adds.w	r3, sl, r3
 8001db8:	623b      	str	r3, [r7, #32]
 8001dba:	462b      	mov	r3, r5
 8001dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001dce:	4629      	mov	r1, r5
 8001dd0:	028b      	lsls	r3, r1, #10
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dd8:	4621      	mov	r1, r4
 8001dda:	028a      	lsls	r2, r1, #10
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001de4:	2200      	movs	r2, #0
 8001de6:	673b      	str	r3, [r7, #112]	; 0x70
 8001de8:	677a      	str	r2, [r7, #116]	; 0x74
 8001dea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001dee:	f7fe fa09 	bl	8000204 <__aeabi_uldivmod>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4613      	mov	r3, r2
 8001df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e1e:	e0eb      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2c:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d06b      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e38:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	099b      	lsrs	r3, r3, #6
 8001e3e:	2200      	movs	r2, #0
 8001e40:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e54:	4622      	mov	r2, r4
 8001e56:	462b      	mov	r3, r5
 8001e58:	f04f 0000 	mov.w	r0, #0
 8001e5c:	f04f 0100 	mov.w	r1, #0
 8001e60:	0159      	lsls	r1, r3, #5
 8001e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e66:	0150      	lsls	r0, r2, #5
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	1a51      	subs	r1, r2, r1
 8001e70:	61b9      	str	r1, [r7, #24]
 8001e72:	4629      	mov	r1, r5
 8001e74:	eb63 0301 	sbc.w	r3, r3, r1
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e86:	4659      	mov	r1, fp
 8001e88:	018b      	lsls	r3, r1, #6
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e90:	4651      	mov	r1, sl
 8001e92:	018a      	lsls	r2, r1, #6
 8001e94:	4651      	mov	r1, sl
 8001e96:	ebb2 0801 	subs.w	r8, r2, r1
 8001e9a:	4659      	mov	r1, fp
 8001e9c:	eb63 0901 	sbc.w	r9, r3, r1
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eb4:	4690      	mov	r8, r2
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	4623      	mov	r3, r4
 8001eba:	eb18 0303 	adds.w	r3, r8, r3
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	eb49 0303 	adc.w	r3, r9, r3
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	024b      	lsls	r3, r1, #9
 8001ed8:	4621      	mov	r1, r4
 8001eda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ede:	4621      	mov	r1, r4
 8001ee0:	024a      	lsls	r2, r1, #9
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eea:	2200      	movs	r2, #0
 8001eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8001eee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ef4:	f7fe f986 	bl	8000204 <__aeabi_uldivmod>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4613      	mov	r3, r2
 8001efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f02:	e065      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x420>
 8001f04:	40023800 	.word	0x40023800
 8001f08:	00f42400 	.word	0x00f42400
 8001f0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	2200      	movs	r2, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f20:	653b      	str	r3, [r7, #80]	; 0x50
 8001f22:	2300      	movs	r3, #0
 8001f24:	657b      	str	r3, [r7, #84]	; 0x54
 8001f26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	0159      	lsls	r1, r3, #5
 8001f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f3c:	0150      	lsls	r0, r2, #5
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4641      	mov	r1, r8
 8001f44:	1a51      	subs	r1, r2, r1
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	4649      	mov	r1, r9
 8001f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f5c:	4659      	mov	r1, fp
 8001f5e:	018b      	lsls	r3, r1, #6
 8001f60:	4651      	mov	r1, sl
 8001f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f66:	4651      	mov	r1, sl
 8001f68:	018a      	lsls	r2, r1, #6
 8001f6a:	4651      	mov	r1, sl
 8001f6c:	1a54      	subs	r4, r2, r1
 8001f6e:	4659      	mov	r1, fp
 8001f70:	eb63 0501 	sbc.w	r5, r3, r1
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	00eb      	lsls	r3, r5, #3
 8001f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f82:	00e2      	lsls	r2, r4, #3
 8001f84:	4614      	mov	r4, r2
 8001f86:	461d      	mov	r5, r3
 8001f88:	4643      	mov	r3, r8
 8001f8a:	18e3      	adds	r3, r4, r3
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	464b      	mov	r3, r9
 8001f90:	eb45 0303 	adc.w	r3, r5, r3
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	028b      	lsls	r3, r1, #10
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fac:	4621      	mov	r1, r4
 8001fae:	028a      	lsls	r2, r1, #10
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fb8:	2200      	movs	r2, #0
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001fbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fc2:	f7fe f91f 	bl	8000204 <__aeabi_uldivmod>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4613      	mov	r3, r2
 8001fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0f1b      	lsrs	r3, r3, #28
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fee:	e003      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ff6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	37b8      	adds	r7, #184	; 0xb8
 8002000:	46bd      	mov	sp, r7
 8002002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	00f42400 	.word	0x00f42400

08002010 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e28d      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8083 	beq.w	8002136 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002030:	4b94      	ldr	r3, [pc, #592]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b04      	cmp	r3, #4
 800203a:	d019      	beq.n	8002070 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800203c:	4b91      	ldr	r3, [pc, #580]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002044:	2b08      	cmp	r3, #8
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002048:	4b8e      	ldr	r3, [pc, #568]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002054:	d00c      	beq.n	8002070 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002056:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d112      	bne.n	8002088 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4b88      	ldr	r3, [pc, #544]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206e:	d10b      	bne.n	8002088 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	4b84      	ldr	r3, [pc, #528]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d05b      	beq.n	8002134 <HAL_RCC_OscConfig+0x124>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d157      	bne.n	8002134 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e25a      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_OscConfig+0x90>
 8002092:	4b7c      	ldr	r3, [pc, #496]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7b      	ldr	r2, [pc, #492]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xcc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xb4>
 80020aa:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a75      	ldr	r2, [pc, #468]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b73      	ldr	r3, [pc, #460]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a72      	ldr	r2, [pc, #456]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xcc>
 80020c4:	4b6f      	ldr	r3, [pc, #444]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6e      	ldr	r2, [pc, #440]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b6c      	ldr	r3, [pc, #432]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a6b      	ldr	r2, [pc, #428]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe fe42 	bl	8000d6c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ec:	f7fe fe3e 	bl	8000d6c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e21f      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xdc>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fe2e 	bl	8000d6c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe fe2a 	bl	8000d6c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e20b      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b57      	ldr	r3, [pc, #348]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x104>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d06f      	beq.n	8002222 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002142:	4b50      	ldr	r3, [pc, #320]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d017      	beq.n	800217e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800214e:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002156:	2b08      	cmp	r3, #8
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800215a:	4b4a      	ldr	r3, [pc, #296]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d11c      	bne.n	80021ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002172:	4b44      	ldr	r3, [pc, #272]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d116      	bne.n	80021ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x186>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e1d3      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4937      	ldr	r1, [pc, #220]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	e03a      	b.n	8002222 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b34      	ldr	r3, [pc, #208]	; (8002288 <HAL_RCC_OscConfig+0x278>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7fe fdd7 	bl	8000d6c <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c2:	f7fe fdd3 	bl	8000d6c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e1b4      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4925      	ldr	r1, [pc, #148]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCC_OscConfig+0x278>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fdb6 	bl	8000d6c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002204:	f7fe fdb2 	bl	8000d6c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e193      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d036      	beq.n	800229c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_RCC_OscConfig+0x27c>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7fe fd96 	bl	8000d6c <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002244:	f7fe fd92 	bl	8000d6c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e173      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x234>
 8002262:	e01b      	b.n	800229c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_OscConfig+0x27c>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7fe fd7f 	bl	8000d6c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	e00e      	b.n	8002290 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002272:	f7fe fd7b 	bl	8000d6c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d907      	bls.n	8002290 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e15c      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
 8002284:	40023800 	.word	0x40023800
 8002288:	42470000 	.word	0x42470000
 800228c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ea      	bne.n	8002272 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8097 	beq.w	80023d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ae:	4b83      	ldr	r3, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a7e      	ldr	r2, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_OscConfig+0x4b0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e6:	4b76      	ldr	r3, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x4b0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a75      	ldr	r2, [pc, #468]	; (80024c0 <HAL_RCC_OscConfig+0x4b0>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fd3b 	bl	8000d6c <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7fe fd37 	bl	8000d6c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e118      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x4b0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x31e>
 8002320:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a65      	ldr	r2, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
 800232c:	e01c      	b.n	8002368 <HAL_RCC_OscConfig+0x358>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b05      	cmp	r3, #5
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x340>
 8002336:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	4a60      	ldr	r2, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6713      	str	r3, [r2, #112]	; 0x70
 8002342:	4b5e      	ldr	r3, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6713      	str	r3, [r2, #112]	; 0x70
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0x358>
 8002350:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a59      	ldr	r2, [pc, #356]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
 800235c:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a56      	ldr	r2, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002362:	f023 0304 	bic.w	r3, r3, #4
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d015      	beq.n	800239c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7fe fcfc 	bl	8000d6c <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7fe fcf8 	bl	8000d6c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0d7      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0ee      	beq.n	8002378 <HAL_RCC_OscConfig+0x368>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7fe fce6 	bl	8000d6c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe fce2 	bl	8000d6c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0c1      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ba:	4b40      	ldr	r3, [pc, #256]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1ee      	bne.n	80023a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023cc:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	4a3a      	ldr	r2, [pc, #232]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80023d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80ad 	beq.w	800253c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d060      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d145      	bne.n	8002482 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <HAL_RCC_OscConfig+0x4b4>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe fcb6 	bl	8000d6c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe fcb2 	bl	8000d6c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e093      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	019b      	lsls	r3, r3, #6
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	071b      	lsls	r3, r3, #28
 800244e:	491b      	ldr	r1, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x4b4>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fc87 	bl	8000d6c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fc83 	bl	8000d6c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e064      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x452>
 8002480:	e05c      	b.n	800253c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_RCC_OscConfig+0x4b4>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fc70 	bl	8000d6c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fc6c 	bl	8000d6c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e04d      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x480>
 80024ae:	e045      	b.n	800253c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e040      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000
 80024c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_RCC_OscConfig+0x538>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d030      	beq.n	8002538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d129      	bne.n	8002538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d122      	bne.n	8002538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024f8:	4013      	ands	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002500:	4293      	cmp	r3, r2
 8002502:	d119      	bne.n	8002538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	3b01      	subs	r3, #1
 8002512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d10f      	bne.n	8002538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d107      	bne.n	8002538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e03f      	b.n	80025de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fab2 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800258e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f829 	bl	80025e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b0c0      	sub	sp, #256	; 0x100
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	68d9      	ldr	r1, [r3, #12]
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	ea40 0301 	orr.w	r3, r0, r1
 8002610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	431a      	orrs	r2, r3
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	431a      	orrs	r2, r3
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002640:	f021 010c 	bic.w	r1, r1, #12
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800264e:	430b      	orrs	r3, r1
 8002650:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002662:	6999      	ldr	r1, [r3, #24]
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	ea40 0301 	orr.w	r3, r0, r1
 800266e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <UART_SetConfig+0x2cc>)
 8002678:	429a      	cmp	r2, r3
 800267a:	d005      	beq.n	8002688 <UART_SetConfig+0xa0>
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b8d      	ldr	r3, [pc, #564]	; (80028b8 <UART_SetConfig+0x2d0>)
 8002684:	429a      	cmp	r2, r3
 8002686:	d104      	bne.n	8002692 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002688:	f7ff fa7e 	bl	8001b88 <HAL_RCC_GetPCLK2Freq>
 800268c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002690:	e003      	b.n	800269a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002692:	f7ff fa65 	bl	8001b60 <HAL_RCC_GetPCLK1Freq>
 8002696:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800269a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026a4:	f040 810c 	bne.w	80028c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ac:	2200      	movs	r2, #0
 80026ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026ba:	4622      	mov	r2, r4
 80026bc:	462b      	mov	r3, r5
 80026be:	1891      	adds	r1, r2, r2
 80026c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80026c2:	415b      	adcs	r3, r3
 80026c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026ca:	4621      	mov	r1, r4
 80026cc:	eb12 0801 	adds.w	r8, r2, r1
 80026d0:	4629      	mov	r1, r5
 80026d2:	eb43 0901 	adc.w	r9, r3, r1
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ea:	4690      	mov	r8, r2
 80026ec:	4699      	mov	r9, r3
 80026ee:	4623      	mov	r3, r4
 80026f0:	eb18 0303 	adds.w	r3, r8, r3
 80026f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026f8:	462b      	mov	r3, r5
 80026fa:	eb49 0303 	adc.w	r3, r9, r3
 80026fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800270e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002712:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002716:	460b      	mov	r3, r1
 8002718:	18db      	adds	r3, r3, r3
 800271a:	653b      	str	r3, [r7, #80]	; 0x50
 800271c:	4613      	mov	r3, r2
 800271e:	eb42 0303 	adc.w	r3, r2, r3
 8002722:	657b      	str	r3, [r7, #84]	; 0x54
 8002724:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002728:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800272c:	f7fd fd6a 	bl	8000204 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4b61      	ldr	r3, [pc, #388]	; (80028bc <UART_SetConfig+0x2d4>)
 8002736:	fba3 2302 	umull	r2, r3, r3, r2
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	011c      	lsls	r4, r3, #4
 800273e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002742:	2200      	movs	r2, #0
 8002744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002748:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800274c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002750:	4642      	mov	r2, r8
 8002752:	464b      	mov	r3, r9
 8002754:	1891      	adds	r1, r2, r2
 8002756:	64b9      	str	r1, [r7, #72]	; 0x48
 8002758:	415b      	adcs	r3, r3
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800275c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002760:	4641      	mov	r1, r8
 8002762:	eb12 0a01 	adds.w	sl, r2, r1
 8002766:	4649      	mov	r1, r9
 8002768:	eb43 0b01 	adc.w	fp, r3, r1
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002778:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800277c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002780:	4692      	mov	sl, r2
 8002782:	469b      	mov	fp, r3
 8002784:	4643      	mov	r3, r8
 8002786:	eb1a 0303 	adds.w	r3, sl, r3
 800278a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800278e:	464b      	mov	r3, r9
 8002790:	eb4b 0303 	adc.w	r3, fp, r3
 8002794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027ac:	460b      	mov	r3, r1
 80027ae:	18db      	adds	r3, r3, r3
 80027b0:	643b      	str	r3, [r7, #64]	; 0x40
 80027b2:	4613      	mov	r3, r2
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	647b      	str	r3, [r7, #68]	; 0x44
 80027ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027c2:	f7fd fd1f 	bl	8000204 <__aeabi_uldivmod>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <UART_SetConfig+0x2d4>)
 80027ce:	fba3 2301 	umull	r2, r3, r3, r1
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2264      	movs	r2, #100	; 0x64
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	1acb      	subs	r3, r1, r3
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <UART_SetConfig+0x2d4>)
 80027e4:	fba3 2302 	umull	r2, r3, r3, r2
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f0:	441c      	add	r4, r3
 80027f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002800:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002804:	4642      	mov	r2, r8
 8002806:	464b      	mov	r3, r9
 8002808:	1891      	adds	r1, r2, r2
 800280a:	63b9      	str	r1, [r7, #56]	; 0x38
 800280c:	415b      	adcs	r3, r3
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002810:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002814:	4641      	mov	r1, r8
 8002816:	1851      	adds	r1, r2, r1
 8002818:	6339      	str	r1, [r7, #48]	; 0x30
 800281a:	4649      	mov	r1, r9
 800281c:	414b      	adcs	r3, r1
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800282c:	4659      	mov	r1, fp
 800282e:	00cb      	lsls	r3, r1, #3
 8002830:	4651      	mov	r1, sl
 8002832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002836:	4651      	mov	r1, sl
 8002838:	00ca      	lsls	r2, r1, #3
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	4603      	mov	r3, r0
 8002840:	4642      	mov	r2, r8
 8002842:	189b      	adds	r3, r3, r2
 8002844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002848:	464b      	mov	r3, r9
 800284a:	460a      	mov	r2, r1
 800284c:	eb42 0303 	adc.w	r3, r2, r3
 8002850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002860:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002868:	460b      	mov	r3, r1
 800286a:	18db      	adds	r3, r3, r3
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
 800286e:	4613      	mov	r3, r2
 8002870:	eb42 0303 	adc.w	r3, r2, r3
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800287a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800287e:	f7fd fcc1 	bl	8000204 <__aeabi_uldivmod>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <UART_SetConfig+0x2d4>)
 8002888:	fba3 1302 	umull	r1, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	2164      	movs	r1, #100	; 0x64
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	3332      	adds	r3, #50	; 0x32
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <UART_SetConfig+0x2d4>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	f003 0207 	and.w	r2, r3, #7
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4422      	add	r2, r4
 80028ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028b0:	e105      	b.n	8002abe <UART_SetConfig+0x4d6>
 80028b2:	bf00      	nop
 80028b4:	40011000 	.word	0x40011000
 80028b8:	40011400 	.word	0x40011400
 80028bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028d2:	4642      	mov	r2, r8
 80028d4:	464b      	mov	r3, r9
 80028d6:	1891      	adds	r1, r2, r2
 80028d8:	6239      	str	r1, [r7, #32]
 80028da:	415b      	adcs	r3, r3
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028e2:	4641      	mov	r1, r8
 80028e4:	1854      	adds	r4, r2, r1
 80028e6:	4649      	mov	r1, r9
 80028e8:	eb43 0501 	adc.w	r5, r3, r1
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	00eb      	lsls	r3, r5, #3
 80028f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fa:	00e2      	lsls	r2, r4, #3
 80028fc:	4614      	mov	r4, r2
 80028fe:	461d      	mov	r5, r3
 8002900:	4643      	mov	r3, r8
 8002902:	18e3      	adds	r3, r4, r3
 8002904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002908:	464b      	mov	r3, r9
 800290a:	eb45 0303 	adc.w	r3, r5, r3
 800290e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800291e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800292e:	4629      	mov	r1, r5
 8002930:	008b      	lsls	r3, r1, #2
 8002932:	4621      	mov	r1, r4
 8002934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002938:	4621      	mov	r1, r4
 800293a:	008a      	lsls	r2, r1, #2
 800293c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002940:	f7fd fc60 	bl	8000204 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4b60      	ldr	r3, [pc, #384]	; (8002acc <UART_SetConfig+0x4e4>)
 800294a:	fba3 2302 	umull	r2, r3, r3, r2
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	011c      	lsls	r4, r3, #4
 8002952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002956:	2200      	movs	r2, #0
 8002958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800295c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002960:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002964:	4642      	mov	r2, r8
 8002966:	464b      	mov	r3, r9
 8002968:	1891      	adds	r1, r2, r2
 800296a:	61b9      	str	r1, [r7, #24]
 800296c:	415b      	adcs	r3, r3
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002974:	4641      	mov	r1, r8
 8002976:	1851      	adds	r1, r2, r1
 8002978:	6139      	str	r1, [r7, #16]
 800297a:	4649      	mov	r1, r9
 800297c:	414b      	adcs	r3, r1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800298c:	4659      	mov	r1, fp
 800298e:	00cb      	lsls	r3, r1, #3
 8002990:	4651      	mov	r1, sl
 8002992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002996:	4651      	mov	r1, sl
 8002998:	00ca      	lsls	r2, r1, #3
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	4642      	mov	r2, r8
 80029a2:	189b      	adds	r3, r3, r2
 80029a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029a8:	464b      	mov	r3, r9
 80029aa:	460a      	mov	r2, r1
 80029ac:	eb42 0303 	adc.w	r3, r2, r3
 80029b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80029be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029cc:	4649      	mov	r1, r9
 80029ce:	008b      	lsls	r3, r1, #2
 80029d0:	4641      	mov	r1, r8
 80029d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d6:	4641      	mov	r1, r8
 80029d8:	008a      	lsls	r2, r1, #2
 80029da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029de:	f7fd fc11 	bl	8000204 <__aeabi_uldivmod>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4b39      	ldr	r3, [pc, #228]	; (8002acc <UART_SetConfig+0x4e4>)
 80029e8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	2164      	movs	r1, #100	; 0x64
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	3332      	adds	r3, #50	; 0x32
 80029fa:	4a34      	ldr	r2, [pc, #208]	; (8002acc <UART_SetConfig+0x4e4>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a06:	441c      	add	r4, r3
 8002a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	673b      	str	r3, [r7, #112]	; 0x70
 8002a10:	677a      	str	r2, [r7, #116]	; 0x74
 8002a12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a16:	4642      	mov	r2, r8
 8002a18:	464b      	mov	r3, r9
 8002a1a:	1891      	adds	r1, r2, r2
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	415b      	adcs	r3, r3
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a26:	4641      	mov	r1, r8
 8002a28:	1851      	adds	r1, r2, r1
 8002a2a:	6039      	str	r1, [r7, #0]
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	414b      	adcs	r3, r1
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a3e:	4659      	mov	r1, fp
 8002a40:	00cb      	lsls	r3, r1, #3
 8002a42:	4651      	mov	r1, sl
 8002a44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a48:	4651      	mov	r1, sl
 8002a4a:	00ca      	lsls	r2, r1, #3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	4642      	mov	r2, r8
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a58:	464b      	mov	r3, r9
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	eb42 0303 	adc.w	r3, r2, r3
 8002a60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a6c:	667a      	str	r2, [r7, #100]	; 0x64
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	008b      	lsls	r3, r1, #2
 8002a7e:	4641      	mov	r1, r8
 8002a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a84:	4641      	mov	r1, r8
 8002a86:	008a      	lsls	r2, r1, #2
 8002a88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a8c:	f7fd fbba 	bl	8000204 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <UART_SetConfig+0x4e4>)
 8002a96:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2164      	movs	r1, #100	; 0x64
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	3332      	adds	r3, #50	; 0x32
 8002aa8:	4a08      	ldr	r2, [pc, #32]	; (8002acc <UART_SetConfig+0x4e4>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4422      	add	r2, r4
 8002abc:	609a      	str	r2, [r3, #8]
}
 8002abe:	bf00      	nop
 8002ac0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aca:	bf00      	nop
 8002acc:	51eb851f 	.word	0x51eb851f

08002ad0 <__libc_init_array>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	4d0d      	ldr	r5, [pc, #52]	; (8002b08 <__libc_init_array+0x38>)
 8002ad4:	4c0d      	ldr	r4, [pc, #52]	; (8002b0c <__libc_init_array+0x3c>)
 8002ad6:	1b64      	subs	r4, r4, r5
 8002ad8:	10a4      	asrs	r4, r4, #2
 8002ada:	2600      	movs	r6, #0
 8002adc:	42a6      	cmp	r6, r4
 8002ade:	d109      	bne.n	8002af4 <__libc_init_array+0x24>
 8002ae0:	4d0b      	ldr	r5, [pc, #44]	; (8002b10 <__libc_init_array+0x40>)
 8002ae2:	4c0c      	ldr	r4, [pc, #48]	; (8002b14 <__libc_init_array+0x44>)
 8002ae4:	f000 f820 	bl	8002b28 <_init>
 8002ae8:	1b64      	subs	r4, r4, r5
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	2600      	movs	r6, #0
 8002aee:	42a6      	cmp	r6, r4
 8002af0:	d105      	bne.n	8002afe <__libc_init_array+0x2e>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af8:	4798      	blx	r3
 8002afa:	3601      	adds	r6, #1
 8002afc:	e7ee      	b.n	8002adc <__libc_init_array+0xc>
 8002afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b02:	4798      	blx	r3
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7f2      	b.n	8002aee <__libc_init_array+0x1e>
 8002b08:	08002b60 	.word	0x08002b60
 8002b0c:	08002b60 	.word	0x08002b60
 8002b10:	08002b60 	.word	0x08002b60
 8002b14:	08002b64 	.word	0x08002b64

08002b18 <memset>:
 8002b18:	4402      	add	r2, r0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <memset+0xa>
 8002b20:	4770      	bx	lr
 8002b22:	f803 1b01 	strb.w	r1, [r3], #1
 8002b26:	e7f9      	b.n	8002b1c <memset+0x4>

08002b28 <_init>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr

08002b34 <_fini>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr
